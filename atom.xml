<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EchoDemo&#39;s Blogs</title>
  
  <subtitle>自我管理，知识管理，时间管理，阅读。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.echodemo.cc/"/>
  <updated>2018-03-14T12:27:39.724Z</updated>
  <id>http://www.echodemo.cc/</id>
  
  <author>
    <name>EchoDemo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大整数减法</title>
    <link href="http://www.echodemo.cc/2018/03/14/%E5%A4%A7%E6%95%B4%E6%95%B0%E5%87%8F%E6%B3%95/"/>
    <id>http://www.echodemo.cc/2018/03/14/大整数减法/</id>
    <published>2018-03-14T11:53:41.000Z</published>
    <updated>2018-03-14T12:27:39.724Z</updated>
    
    <content type="html"><![CDATA[<p>大整数减法又称之为高精度减法，大整数其含义就是基本数据类型无法存储的整数。比如A和B是有着1000个数位的整数。那么该如何进行相减呢？其实本质上和小学的减法是一样的。我们将无法储存的大整数放进int型的数组，大整数的高位存储在数组的高位，低位存储在数组的低位。在相减之前去比较两者的大小，如果是小的减大的则先把负号输出来，将两者进行交换之后再按大的减小的的步骤来。在减的过程中如果当前位是小减大，那么当前位先加10再减，被减数的当前位的下一位同时需要减1。此时还需要考虑高位为0的情况：例如两数是相等的情况，那么就需要消去高位的0。完成之后再将其反向输出就行了。具体的算法如下：</p><pre><code>#include &quot;stdafx.h&quot;#include&lt;iostream&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;using namespace std;struct bign {    int d[1000];//使用int型数组存放大整数的每一位。    int len;//记录大整数的长度。    bign() {//&quot;构造函数&quot;用于初始化结构体。        memset(d, 0, sizeof(d));        len=0;    }};bign change(char str[]) {//将存储在字符数组中的大整数转换为bign    bign a;    a.len = strlen(str);    for (int i = 0;i &lt; a.len;i++) {//大整数的高位存储在数组的高位，低位存储在数组的低位。        a.d[i] = str[a.len - i - 1] - &apos;0&apos;;    }    return a;}bign sub(bign a, bign b) {//a+b。    bign c;    for (int i = 0;i &lt; a.len || i &lt; b.len;i++) {        if (a.d[i] &lt; b.d[i]) {            a.d[i + 1]--;//向高位借位。            a.d[i] += 10;//当前位加10。        }        c.d[c.len++] = a.d[i] - b.d[i];//当前位相减。    }    while ((c.len - 1 &gt;= 1) &amp;&amp; c.d[c.len - 1] == 0) {        c.len--;//去除高位的0，同时如果两数相等保留一个0。    }    return c;}int compare(bign a, bign b) {//比较两数的大小，先比较长度，再比较各个位的数值大小。    if (a.len &gt; b.len) return 1;//a大    else if (b.len &gt; a.len) return -1;//b大    else {        for (int i = a.len - 1;i &gt;= 0;i--) {            if (a.d[i] &gt; b.d[i]) return 1;            else if (a.d[i] &lt; b.d[i]) return -1;        }        return 0;    }}void print(bign a) {//输出bign。    for (int i = a.len - 1;i &gt;= 0;i--) {        cout &lt;&lt; a.d[i];    }}int main() {    char str1[1000], str2[1000];    cin &gt;&gt; str1 &gt;&gt; str2;    bign a = change(str1);    bign b = change(str2);    if (compare(a, b) &lt; 0) {//如果a小于b，就交换。        cout &lt;&lt; &quot;-&quot;;        bign c = a;        a = b;        b = c;    }    print(sub(a, b));    system(&quot;pause&quot;);    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大整数减法又称之为高精度减法，大整数其含义就是基本数据类型无法存储的整数。比如A和B是有着1000个数位的整数。那么该如何进行相减呢？其实本质上和小学的减法是一样的。我们将无法储存的大整数放进int型的数组，大整数的高位存储在数组的高位，低位存储在数组的低位。在相减之前去比
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C++" scheme="http://www.echodemo.cc/tags/C/"/>
    
      <category term="算法" scheme="http://www.echodemo.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>大整数加法</title>
    <link href="http://www.echodemo.cc/2018/03/14/%E5%A4%A7%E6%95%B4%E6%95%B0%E5%8A%A0%E6%B3%95/"/>
    <id>http://www.echodemo.cc/2018/03/14/大整数加法/</id>
    <published>2018-03-14T08:51:34.000Z</published>
    <updated>2018-03-14T12:27:43.483Z</updated>
    
    <content type="html"><![CDATA[<p>大整数加法又称之为高精度加法，大整数其含义就是基本数据类型无法存储的整数。比如A和B是有着1000个数位的整数。那么该如何进行相加呢？其实本质上和小学的加法是一样的。我们将无法储存的大整数放进int型的数组，大整数的高位存储在数组的高位，低位存储在数组的低位。在相加完成之后再将其反向输出就行了。具体的算法如下：</p><pre><code>#include &quot;stdafx.h&quot;#include&lt;iostream&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;using namespace std;struct bign {    int d[1000];//使用int型数组存放大整数的每一位。    int len;//记录大整数的长度。    bign() {//&quot;构造函数&quot;用于初始化结构体。        memset(d, 0, sizeof(d));        len=0;    }};bign change(char str[]) {//将存储在字符数组中的大整数转换为bign    bign a;    a.len = strlen(str);    for (int i = 0;i &lt; a.len;i++) {//大整数的高位存储在数组的高位，低位存储在数组的低位。        a.d[i] = str[a.len - i - 1] - &apos;0&apos;;    }    return a;}bign add(bign a, bign b) {//a+b。    bign c;    int carry = 0;//存储进位。    for (int i = 0;i &lt; a.len || i &lt; b.len;i++) {        int temp = a.d[i] + b.d[i] + carry;        c.d[c.len++] = temp % 10;//两数之和的个位。        carry = temp / 10;//两数之和的十位。    }    if (carry != 0)        c.d[c.len++] = carry;//两个大整数的最高位相加之后有进位。    return c;}void print(bign a) {//输出bign。    for (int i = a.len - 1;i &gt;= 0;i--) {        cout &lt;&lt; a.d[i];    }}int main() {    char str1[1000], str2[1000];    cin &gt;&gt; str1 &gt;&gt; str2;    bign a = change(str1);    bign b = change(str2);    print(add(a, b));    system(&quot;pause&quot;);    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大整数加法又称之为高精度加法，大整数其含义就是基本数据类型无法存储的整数。比如A和B是有着1000个数位的整数。那么该如何进行相加呢？其实本质上和小学的加法是一样的。我们将无法储存的大整数放进int型的数组，大整数的高位存储在数组的高位，低位存储在数组的低位。在相加完成之后
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C++" scheme="http://www.echodemo.cc/tags/C/"/>
    
      <category term="算法" scheme="http://www.echodemo.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java中的String</title>
    <link href="http://www.echodemo.cc/2018/03/14/Java%E4%B8%AD%E7%9A%84String/"/>
    <id>http://www.echodemo.cc/2018/03/14/Java中的String/</id>
    <published>2018-03-14T06:56:23.000Z</published>
    <updated>2018-03-14T07:14:48.690Z</updated>
    
    <content type="html"><![CDATA[<p>1、在Java中字符串是一个对象，同样的，String变量存储的是对String对象的引用。且Sting对象的内容是不可变的，但保存String引用的变量是可变的，即String变量存储其他的String对象的引用。</p><p>2、Java虚拟机为了提高效率并节约内存，对具有相同字符串序列的字符串直接量(请注意这里不是指具有相同字符串序列的String对象)使用同一个实例。</p><p>3、字符串的比较：运算符==只能检测两个String是否指向同一个对象，但不会告诉你他们的内容是否相等。而equals方法则可以用来判断两个字符串变量的内容是否相等。compareTo方法用来比较两个字符串时的返回值是，两个字符串从左到右第一个不同字符之间的差值。</p><p>4、StringBuffer类和StringBuilder类都比String类更灵活且这两个类是很相似的，它们创建的对象的值都可以被修改。不过在多任务并发访问的情况下就使用StringBuffer；而如果是单任务访问，就使用StringBuilder更有效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、在Java中字符串是一个对象，同样的，String变量存储的是对String对象的引用。且Sting对象的内容是不可变的，但保存String引用的变量是可变的，即String变量存储其他的String对象的引用。&lt;/p&gt;
&lt;p&gt;2、Java虚拟机为了提高效率并节约内存，
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.echodemo.cc/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>早</title>
    <link href="http://www.echodemo.cc/2018/03/14/%E6%97%A9/"/>
    <id>http://www.echodemo.cc/2018/03/14/早/</id>
    <published>2018-03-14T06:19:32.000Z</published>
    <updated>2018-03-14T06:21:44.316Z</updated>
    
    <content type="html"><![CDATA[<p>昨夜雨疏风骤，晨起的道上落满了香樟树的叶子，叶子大多橙黄，意味着新生。空气湿润，给人以深呼吸的欲望。上课的人群络绎不绝；环游车从耳旁呼啸而过；还有鸟儿藏在春日的绿里，送来阵阵悦耳的啼鸣。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨夜雨疏风骤，晨起的道上落满了香樟树的叶子，叶子大多橙黄，意味着新生。空气湿润，给人以深呼吸的欲望。上课的人群络绎不绝；环游车从耳旁呼啸而过；还有鸟儿藏在春日的绿里，送来阵阵悦耳的啼鸣。&lt;/p&gt;

      
    
    </summary>
    
      <category term="生活" scheme="http://www.echodemo.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="日志" scheme="http://www.echodemo.cc/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>为hexo的next主题添加点击出现桃心效果的功能</title>
    <link href="http://www.echodemo.cc/2018/03/11/%E4%B8%BAhexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E5%87%BA%E7%8E%B0%E6%A1%83%E5%BF%83%E6%95%88%E6%9E%9C%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
    <id>http://www.echodemo.cc/2018/03/11/为hexo的next主题添加点击出现桃心效果的功能/</id>
    <published>2018-03-11T10:54:30.000Z</published>
    <updated>2018-03-11T11:21:00.263Z</updated>
    
    <content type="html"><![CDATA[<p>1、在路径/themes/next/source/js/src里面新建love.js文件。</p><p>2、将下列代码copy进去:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure><p>3、然后打开\themes\next\layout_layout.swig文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：</p><pre><code>&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</code></pre><p>4、接下来你懂的:</p><pre><code>hexo ghexo shexo d</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、在路径/themes/next/source/js/src里面新建love.js文件。&lt;/p&gt;
&lt;p&gt;2、将下列代码copy进去:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://www.echodemo.cc/tags/hexo/"/>
    
      <category term="next" scheme="http://www.echodemo.cc/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>Java中需要注意的Points</title>
    <link href="http://www.echodemo.cc/2018/03/11/Java%E4%B8%AD%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84Points/"/>
    <id>http://www.echodemo.cc/2018/03/11/Java中需要注意的Points/</id>
    <published>2018-03-11T10:43:44.000Z</published>
    <updated>2018-03-13T08:29:53.785Z</updated>
    
    <content type="html"><![CDATA[<p>1、数组的创建不同于基本数据类型变量的声明，声明一个数组变量时并不在内存中给数组分配任何空间。它只是创建一个对数组的引用的存储位置。</p><p>2、在给方法传值的过程中，对于基本数据类型来说，传递的是实参的值，而方法内部的形参获得的值的改变并不会造成方法外部的值的变化；而对于数组类型来说，传递的是数组的引用，也就是说方法中的数组和方法外的数组是一样的，所以如果改变方法中的数组，那么方法外的数组也跟着变化了。</p><p>3、对象是通过对象引用变量来访问的，通常在实例化一个类时包括：声明对象引用变量、创建对象以及将对象的引用赋值给这个变量。其实此处类似于数组的创建，从严格意义上来讲，对象引用变量和对象是不同的，但大多数情况下可以忽略这种不同。另外，类中的数据域(即类中的属性)如果未被初始化，那么会被赋予默认值：引用类型的数据域的默认值是null，数值类型的数据域的默认值是0，boolean是false，char是’\u0000’。但是java没有给方法中的局部变量赋默认值。</p><p>4、java中的静态变量可以被一个类的所有实例共享数据，如果某一个对象修改了静态变量的值，那么同一个类的所有对象都会受到影响。java中的静态变量和静态方法都无须创建类的实例就可以被调用。但是实例方法和实例变量只能在实例方法中使用，不能在静态方法中使用。由此可知，math类中的所有数据域和方法都是静态的。</p><p>5、在类、方法、和数据域前使用public修饰符表示可以在任何其他的类中进行访问；如果没有使用可见性修饰符，那么默认为类、方法和数据域是可以被同一个包中的任何一个类访问；private修饰符限定方法和数据域只能在它自己的类中被访问。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、数组的创建不同于基本数据类型变量的声明，声明一个数组变量时并不在内存中给数组分配任何空间。它只是创建一个对数组的引用的存储位置。&lt;/p&gt;
&lt;p&gt;2、在给方法传值的过程中，对于基本数据类型来说，传递的是实参的值，而方法内部的形参获得的值的改变并不会造成方法外部的值的变化；
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.echodemo.cc/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>为博客添加标签和分类页面</title>
    <link href="http://www.echodemo.cc/2018/03/09/Add-tags-and-categories-to-Blogs/"/>
    <id>http://www.echodemo.cc/2018/03/09/Add-tags-and-categories-to-Blogs/</id>
    <published>2018-03-09T12:50:20.000Z</published>
    <updated>2018-03-10T14:10:15.486Z</updated>
    
    <content type="html"><![CDATA[<p>1、添加标签页面</p><pre><code>定位到 Hexo 站点目录下，使用 hexo new page 新建一个页面，命名为 tags，布局格式为page:$ cd hexo目录$ hexo new page tags内容如下所示，如果要关闭tags页面的评论可以设置comments为false:---title: 标签date: 2014-12-22 12:39:04type: &quot;tags&quot;comments: false---这样以后tags页面在每次执行hexo generate后自动更新。</code></pre><p>2、添加分类页面</p><pre><code>和上面的一样，在hexo目录下执行下面命令：$ hexo new page categories内容为：---title: 分类date: 2014-12-22 12:39:04type: &quot;categories&quot;comments: false---</code></pre><p>3、添加404页面</p><pre><code>新建一个404.html文件，放到themes\next\source目录下，内容你自己定。</code></pre><p>4、添加博文</p><pre><code>$ hexo new [filename]---title: filename!date: create_timetags: tagscategories: categories---或者写好文章后，找到菜单栏的“导出到本地”选项.以md格式导出到本地，然后copy该md文件，粘贴到你当初建的博客站点文件夹下的source\ _posts目录下，一个md文件对应一篇博客文章。</code></pre><p>5、多标签和多分类的表示方法</p><pre><code>tags: [tags1,tags2,tags3]categories: [cat1,cat2,cat3]</code></pre><p>6、对本地作出的修改进行测试和上传</p><pre><code>在你博客站点文件夹下右键空白处，选择Git Bash Here，输入：hexo generate，回车，生成静态页面， 再输入：hexo server，回车，到localhost:4000预览博客效果， 最后输入：hexo deploy，回车，同步到github上去就行了。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、添加标签页面&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;定位到 Hexo 站点目录下，使用 hexo new page 新建一个页面，命名为 tags，布局格式为page:

$ cd hexo目录
$ hexo new page tags
内容如下所示，如果要关闭tags页面的评
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://www.echodemo.cc/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git push to github</title>
    <link href="http://www.echodemo.cc/2018/03/08/Git-push-to-github/"/>
    <id>http://www.echodemo.cc/2018/03/08/Git-push-to-github/</id>
    <published>2018-03-08T08:05:11.000Z</published>
    <updated>2018-03-08T13:17:09.224Z</updated>
    
    <content type="html"><![CDATA[<p>1、git status 查看目前代码的修改状态</p><pre><code>a) 已暂存 (changes to be committed)    new file //表示新建文件    modified //表示修改文件    deleted //表示删除文件b) 已修改 (changed but not updated)    modified //表示修改文件    deleted //表示删除文件c) 未跟踪 (untracked files)另外，git 给出了可能需要的操作命令，git add/rm, gitcheckout –</code></pre><p>2、git diff 查看代码修改的内容(按q键退出)</p><pre><code>比较某文件与最近提交节点的差异。注意：如果该文件已暂存，那么应该使用git diff –cached技巧：如果省略后面一个hashcode，则默认表示与上一提交节点比较。(也可以利用^运算符)</code></pre><p>3、git add [filename] 暂存需要提交的文件</p><pre><code>如果是新建的文件则git add如果是修改的文件则git add如果是删除的文件则 git rm</code></pre><p>4、git commit -m “description informations” 提交已暂存的文件(注意注释填写规范)</p><pre><code>git commit –amend修改最近一次提交。有时候如果提交注释书写有误或者漏提文件，可以使用此命令。</code></pre><p>5、git pull origin master –allow-unrelated-histories</p><pre><code>如果执行失败，就按照提示还原有冲突的文件，然后再次尝试同步。命令：git checkout – &lt;有冲突的文件路径&gt;</code></pre><p>6、git push -u origin master&lt;本地分支名&gt; </p><pre><code>如果执行失败，一般是没有将服务器代码同步到本地导致的，先执行上面的git pull命令。</code></pre><p>7、如果过程中出现‘please enter a commit message…’(即进入了vim),首先esc然后输入:wq即可。</p><pre><code>git rm −r 我的文件夹/此处−r表示递归所有子目录，如果你要删除的，是空的文件夹，此处可以不用带上−r。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、git status 查看目前代码的修改状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a) 已暂存 (changes to be committed)
    new file //表示新建文件
    modified //表示修改文件
    deleted //表示删除文件
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="git" scheme="http://www.echodemo.cc/tags/git/"/>
    
      <category term="github" scheme="http://www.echodemo.cc/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>This is my first blog!</title>
    <link href="http://www.echodemo.cc/2018/03/08/This-is-my-first-blog/"/>
    <id>http://www.echodemo.cc/2018/03/08/This-is-my-first-blog/</id>
    <published>2018-03-08T03:46:44.000Z</published>
    <updated>2018-03-08T08:06:02.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不知道"><a href="#不知道" class="headerlink" title="不知道"></a><em>不知道</em></h2><hr><p><img src="/images/2018/3/moon.jpg" alt=""></p><p>不知道</p><p>头顶遥远的苍穹闪烁的星光</p><p>在无穷无尽里飞行了多少光年</p><p>终于赶来与我的目光相会</p><p><img src="/images/2018/3/book.jpg" alt=""></p><p>不知道</p><p>手中捧握的书卷古老的诗篇</p><p>在岁月长河中留存了多少记忆</p><p>此刻也将属于我的悉心珍藏</p><p><img src="/images/2018/3/hair.jpg" alt=""></p><p>不知道</p><p>你与我不断发酵生酯的相逢</p><p>在冥冥注定中酝酿了多少韶华</p><p>但我仍然记得你发梢的芳香</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;不知道&quot;&gt;&lt;a href=&quot;#不知道&quot; class=&quot;headerlink&quot; title=&quot;不知道&quot;&gt;&lt;/a&gt;&lt;em&gt;不知道&lt;/em&gt;&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/images/2018/3/moon.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;不知
      
    
    </summary>
    
      <category term="生活" scheme="http://www.echodemo.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="随笔" scheme="http://www.echodemo.cc/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="诗词" scheme="http://www.echodemo.cc/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.echodemo.cc/2018/03/08/hello-world/"/>
    <id>http://www.echodemo.cc/2018/03/08/hello-world/</id>
    <published>2018-03-08T03:12:28.919Z</published>
    <updated>2018-03-08T03:12:28.920Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
