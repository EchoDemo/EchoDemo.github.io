<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EchoDemo&#39;s Blogs</title>
  
  <subtitle>自我管理，知识管理，时间管理，阅读。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.echodemo.cc/"/>
  <updated>2018-07-18T16:02:40.570Z</updated>
  <id>http://www.echodemo.cc/</id>
  
  <author>
    <name>EchoDemo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中的List</title>
    <link href="http://www.echodemo.cc/2018/07/18/Java%E4%B8%AD%E7%9A%84List/"/>
    <id>http://www.echodemo.cc/2018/07/18/Java中的List/</id>
    <published>2018-07-18T13:32:57.000Z</published>
    <updated>2018-07-18T16:02:40.570Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、List容器特点"><a href="#1、List容器特点" class="headerlink" title="1、List容器特点"></a>1、List容器特点</h3><p>List容器是有序的collection(也称之为序列)，此接口的用户可以对List容器中每个元素的插入位置进行精准地控制。用户可以根据元素的整数索引(在列表中的位置)访问元素，并搜索列表中的元素。List容器允许插入重复的值，包括null。</p><h3 id="2、ArrayList-动态数组-及常用API"><a href="#2、ArrayList-动态数组-及常用API" class="headerlink" title="2、ArrayList(动态数组)及常用API"></a>2、ArrayList(动态数组)及常用API</h3><p>(1)ArrayList类扩展了AbstractList并实现了List接口。</p><p>(2)支持可随需增长的动态数组。(以1.5倍的倍率进行扩容)</p><p>(3)ArrayList构造方法。ArrayList();ArrayList(Collection c);ArrayList(int capacity);</p><p>(4)除继承的方法之外，ArrayList常用方法。E get(int index)方法：返回此列表中指定位置上的元素；int intdexOf(Object o)：返回此列表中首次出现的指定元素的索引，或如果此列表不含该元素，则返回-1。</p><p>(5)ArrayList的常用方法举例</p><pre><code>import java.util.ArrayList;import java.util.Iterator;import java.util.List;public class ArrayListDemo1 {    public static void main(String[] args) {        /*         * 当我们调用无参构造方法来构造一个ArrayList对象的时候，它会在内部分配一个初始大小为10的一个Object类型数组。         *          * 当添加的数据容量超过数组大小的时候，会产生一个新的数组，新的数组的大小是原来数组大小的1.5倍。接着把原数组         * 中的数据拷贝到新的数组中。         */        List&lt;String&gt; nList=new ArrayList&lt;String&gt;();        nList.add(&quot;chenhao&quot;);//添加元素        nList.add(&quot;lisi&quot;);        nList.add(&quot;lisi&quot;);        nList.add(&quot;wangwu&quot;);        nList.add(1, &quot;jay&quot;);//在指定的位置添加元素        nList.add(&quot;jack&quot;);        nList.set(0, &quot;chengang&quot;);//修改指定位置的元素值        System.out.println(&quot;使用迭代器对象来进行统一的遍历&quot;);        Iterator&lt;String&gt; iterator=nList.iterator();         while (iterator.hasNext()) {            String name = iterator.next();            System.out.println(name);        }        System.out.println(&quot;使用增强for循环进行遍历&quot;);        for(String name:nList){            System.out.println(name);        }        System.out.println(&quot;********************************&quot;);        System.out.println(nList.indexOf(&quot;lisi&quot;));//查找指定元素的位置        System.out.println(nList.remove(&quot;lisi&quot;));//删除元素        System.out.println(nList.remove(0));//删除某个位置的元素        System.out.println(nList.size());//动态数组的大小        System.out.println(nList.contains(&quot;chenhao&quot;));//是否包含某个元素        System.out.println(nList.get(1));//获取指定位置的元素值        System.out.println(nList.isEmpty());//判断动态数组是否为空        nList.clear();//清空动态数组        System.out.println(nList.isEmpty());        System.out.println(&quot;********************************&quot;);    }}</code></pre><p>(6)ArrayList方法的重载举例</p><pre><code>import java.util.ArrayList;import java.util.List;public class ArrayListDemo2 {    public static void main(String[] args) {        List&lt;Student&gt; stuList=new ArrayList&lt;Student&gt;();//以学生类对象作为泛型的具体化        Student stu1=new Student(&quot;zhangsan&quot;, 10);        Student stu2=new Student(&quot;lisi&quot;, 20);        Student stu3=new Student(&quot;jack&quot;, 30);        Student stu4=new Student(&quot;mandy&quot;, 10);        Student stu5=new Student(&quot;mary&quot;, 20);        stuList.add(stu1);        stuList.add(stu2);        stuList.add(stu3);        stuList.add(stu4);        stuList.add(stu5);        Student stu6=new Student(&quot;mary&quot;, 20);        //可以通过按住Ctrl键再点击相应的方法名来查看方法的具体实现。从而搞清楚下列方法在修改equals方法之后的变化。        System.out.println(stuList.indexOf(stu6));        System.out.println(stuList.contains(stu6));        System.out.println(stuList.remove(stu6));        System.out.println(stuList.indexOf(stu5));        System.out.println(stuList.size());    }}class Student{//学生类    private String name;    private int age;    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public Student(String name, int age) {        super();        this.name = name;        this.age = age;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }    @Override    public boolean equals(Object obj) {//重写equals方法，只要姓名和年龄一致则是相同的对象。        if (this == obj)            return true;        if (obj == null)            return false;        if (getClass() != obj.getClass())            return false;        Student other = (Student) obj;        if (age != other.age)            return false;        if (name == null) {            if (other.name != null)                return false;        } else if (!name.equals(other.name))            return false;        return true;    }}</code></pre><h3 id="3、LinkedList及常用API"><a href="#3、LinkedList及常用API" class="headerlink" title="3、LinkedList及常用API"></a>3、LinkedList及常用API</h3><p>(1)LinkedList类扩展AbstractSequentialList并实现List接口。</p><p>(2)LinkedList提供了一个链表数据结构。(其中含有Node对象，并且有前引用和后引用)</p><p>(3)LinkedList有两个构造方法：LinkedList();LinkedList(Collection c);</p><p>(4)除了继承的方法之外，LinkedList类还定义了一些有用的方法用于操作和访问容器中的数据。void addFirst(E e);void addLast(E e);E removeFirst();E removeLast();</p><p>(5)由于Deque接口扩展了Queue接口，成为双端队列，而LinkedList继承了Deque接口。所以它可以提供add、poll先进先出队列的操作，以及其他堆栈和双端队列操作。</p><p>(6)LinkedList常用方法举例</p><pre><code>import java.util.Iterator;import java.util.LinkedList;public class LinkedListDemo1 {    public static void main(String[] args) {        /*         * LinkedList内部封装的是双向的链表数据结构，每个节点是一个Node对象，Node对象中封装的是你要         * 添加的元素，还有一个指向上一个Node对象的引用和下一个Node对象的引用。         *          * 不同的容器有不同的数据结构，不同的数据结构操作起来的性能是不一样的。链表数据结构做插入、删除         * 的效率较高，但查询的效率比较低。数组结构做查询的时候效率高，因为可以通过下标直接找到元素，但         * 插入和删除效率比较低，因为要做移位操作。         */        LinkedList&lt;String&gt; sList=new LinkedList&lt;String&gt;();        sList.add(&quot;zhangsan&quot;);//添加        sList.add(&quot;lisi&quot;);        sList.add(&quot;wangwu&quot;);        sList.add(&quot;rose&quot;);        sList.add(&quot;mary&quot;);        sList.add(&quot;jack&quot;);        sList.addFirst(&quot;chenhao&quot;);//添加至开头        sList.addLast(&quot;mandy&quot;);//添加至末尾        /*Iterator&lt;String&gt; iterator=sList.iterator();        while (iterator.hasNext()) {            String name = iterator.next();            System.out.println(name);        }*/        /*for(String name:sList){            System.out.println(name);        }*/        for(Iterator&lt;String&gt; iterator=sList.iterator();iterator.hasNext();){            String name=iterator.next();            System.out.println(name);        }        System.out.println(sList.removeFirst());//为空时返回异常        System.out.println(sList.size());        sList.clear();        System.out.println(sList.pollFirst());//为空时返回null    }}</code></pre><p>(7)使用LinkedList来实现栈和队列的功能</p><pre><code>import java.util.Iterator;import java.util.LinkedList;public class LinkedListDemo2 {    public static void main(String[] args) {        /*Mystack&lt;String&gt; mystack=new Mystack&lt;String&gt;();        mystack.push(&quot;zhangsan&quot;);        mystack.push(&quot;lisi&quot;);        mystack.push(&quot;wangwu&quot;);        mystack.push(&quot;zhaoliu&quot;);        mystack.pop();        mystack.pop();        Iterator&lt;String&gt; iterator = mystack.iterator();        while(iterator.hasNext()){            System.out.println(iterator.next());        }*/        MyQueue&lt;Integer&gt; myQueue=new MyQueue&lt;Integer&gt;();        myQueue.push(1);        myQueue.push(2);        myQueue.push(3);        myQueue.push(4);        myQueue.push(5);        myQueue.pop();        myQueue.pop();        Iterator&lt;Integer&gt; iterator=myQueue.iterator();        while(iterator.hasNext()){            System.out.println(iterator.next());        }    }}class Mystack&lt;T&gt;{//使用LinkedList来模拟栈的数据结构    private LinkedList&lt;T&gt; data=null;    public Mystack(){        data=new LinkedList&lt;T&gt;();    }    //压栈的方法    public void push(T obj){        data.addFirst(obj);    }    //出栈的方法    public T pop(){        return data.removeFirst();    }    public Iterator&lt;T&gt; iterator(){        return data.iterator();    }}class MyQueue&lt;T&gt;{//使用LinkedList来模拟队列的数据结构    private LinkedList&lt;T&gt; data=null;    public MyQueue(){        data=new LinkedList&lt;T&gt;();    }    //入队    public void push(T obj){        data.addLast(obj);    }    //出队    public T pop(){        return data.removeFirst();    }    public Iterator&lt;T&gt; iterator(){        return data.iterator();    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、List容器特点&quot;&gt;&lt;a href=&quot;#1、List容器特点&quot; class=&quot;headerlink&quot; title=&quot;1、List容器特点&quot;&gt;&lt;/a&gt;1、List容器特点&lt;/h3&gt;&lt;p&gt;List容器是有序的collection(也称之为序列)，此接口的用户可以对
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.echodemo.cc/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的集合</title>
    <link href="http://www.echodemo.cc/2018/07/18/Java%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88/"/>
    <id>http://www.echodemo.cc/2018/07/18/Java中的集合/</id>
    <published>2018-07-18T11:29:49.000Z</published>
    <updated>2018-07-18T11:30:47.859Z</updated>
    
    <content type="html"><![CDATA[<p>1、集合框架：它是一个类库的集合。集合框架就是一个用来表示和操作集合的统一架构，它包含了实现集合的接口与类。集合框架包含了各种各样的容器，每一种容器都可以存放数据并且提供了操作容器当中数据的相关方法。</p><p>2、集合框架中不同的集合类有各自不同的数据结构，所以在使用中要根据应用的性能要求来选择不同的集合类。</p><p>3、集合类存放在java.util包中，今后进行程序编程时将大量使用集合类和相关接口。其中包括Iterable:迭代器接口；Collection：类集接口；List：列表接口；Set：数据集接口；Queue：队列；Map：键值对组合映射表。</p><p>(1)Iterable接口</p><p>实现该接口允许对象成为“foreach”语句的目标，即该集合对象允许迭代。类集接口Collection是Iterable的子接口，所以所有类集对象可以迭代访问，而映射Map不行。(Map并没有实现Iterable接口)</p><p>Iterator<t>iterator():功能：返回一个在一组T类型的元素上进行迭代的迭代器对象。迭代器是实现了Iterator/ListIterator接口的类的对象，可以通过遍历类集，访问操作其中的每个元素。ListIterator继承了父接口Iterator，允许双向遍历集合，并可以修改和删除元素。</t></p><p>(2)Collection接口</p><p>int size();boolean isEmpty();boolean contains(Object o);Iterator<e> iterator;Object[] toArray();boolean add(E e);boolean remove(Object o);void clear()。等等</e></p><p>(3)List、Set、Map接口</p><p>List接口扩展了Collection，有序且可重复；Set接口扩展了Collection，无序且不可重复；Map是一个存储关键字/值对的对象。映射不是Collection的子接口，所以它本身不能使用迭代器来进行遍历。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、集合框架：它是一个类库的集合。集合框架就是一个用来表示和操作集合的统一架构，它包含了实现集合的接口与类。集合框架包含了各种各样的容器，每一种容器都可以存放数据并且提供了操作容器当中数据的相关方法。&lt;/p&gt;
&lt;p&gt;2、集合框架中不同的集合类有各自不同的数据结构，所以在使用
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.echodemo.cc/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>成为职场人</title>
    <link href="http://www.echodemo.cc/2018/07/17/%E6%88%90%E4%B8%BA%E8%81%8C%E5%9C%BA%E4%BA%BA/"/>
    <id>http://www.echodemo.cc/2018/07/17/成为职场人/</id>
    <published>2018-07-17T10:58:27.000Z</published>
    <updated>2018-07-17T10:59:09.813Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="生活" scheme="http://www.echodemo.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="读书笔记" scheme="http://www.echodemo.cc/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>礼仪培训笔记</title>
    <link href="http://www.echodemo.cc/2018/07/17/%E7%A4%BC%E4%BB%AA%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.echodemo.cc/2018/07/17/礼仪培训笔记/</id>
    <published>2018-07-17T10:15:32.000Z</published>
    <updated>2018-07-17T10:50:41.212Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、什么是礼仪？"><a href="#一、什么是礼仪？" class="headerlink" title="一、什么是礼仪？"></a>一、什么是礼仪？</h3><p>礼仪=礼节+原则=心理+形式</p><h3 id="二、简析服务礼仪"><a href="#二、简析服务礼仪" class="headerlink" title="二、简析服务礼仪"></a>二、简析服务礼仪</h3><p>1、顾客永远是对的（把面子留给客人，放弃自我，自主揽错）</p><p>2、永远不要辩解，服务中禁止使用推卸责任的语言。</p><p>3、注重首因效应、末轮效应。比如：缩短客人的等待时间。</p><p>4、在职场当中得体比漂亮更重要。包括面部，发型，举止，服饰，谈吐。如：不能穿短衬打领带，衬衣只买领围的大小。</p><h3 id="三、学会用眼睛说话"><a href="#三、学会用眼睛说话" class="headerlink" title="三、学会用眼睛说话"></a>三、学会用眼睛说话</h3><p>1、目光注视方式（PAC规律）</p><p>2、目光注视区域（三角定律）</p><p>3、目光注视时间规律（3~5秒）</p><p>4、目光注视的距离</p><h3 id="四、人际沟通“六到”"><a href="#四、人际沟通“六到”" class="headerlink" title="四、人际沟通“六到”"></a>四、人际沟通“六到”</h3><p>1、脑到：先三思，后言行。</p><p>2、眼到：专注，诚恳，体现尊重。</p><p>3、耳到：诚心聆听，不打岔。</p><p>4、口到：不吝啬鼓励、善意、赞美的语言。</p><p>5、心到：从他人角度理解，换位思考。</p><p>6、脚到：主动接近，距离合适。</p><h3 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h3><p>1、服务距离：0.5~1.5米；展示距离：1~3米；引导距离：在客户左前方1~1.5米；待命距离：3米以外。</p><p>2、鞠躬距离控制：脚前方2米是15度；脚前方1.5米是30度；脚前方1.0米是45度。</p><p>3、在职场以职称论高低，在社交场合以女士为尊者，在家庭以年龄为长。</p><p>4、握手需要把握力度，距离。在不同的场合都是尊者先伸手握手。自我介绍在握手之前，且尊者后进行自我介绍。尊者有优先了解别人的权利。</p><p>5、名片：先客后主，先低后高，尊者优先收名片。尊者有优先了解别人的权利。</p><h5 id="6、先肯定全部，再否认局部。"><a href="#6、先肯定全部，再否认局部。" class="headerlink" title="6、先肯定全部，再否认局部。"></a>6、先肯定全部，再否认局部。</h5><h2 id="注：上班提前半小时，开会提前10分钟，由你来准备会议提前半小时。"><a href="#注：上班提前半小时，开会提前10分钟，由你来准备会议提前半小时。" class="headerlink" title="注：上班提前半小时，开会提前10分钟，由你来准备会议提前半小时。"></a>注：上班提前半小时，开会提前10分钟，由你来准备会议提前半小时。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、什么是礼仪？&quot;&gt;&lt;a href=&quot;#一、什么是礼仪？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是礼仪？&quot;&gt;&lt;/a&gt;一、什么是礼仪？&lt;/h3&gt;&lt;p&gt;礼仪=礼节+原则=心理+形式&lt;/p&gt;
&lt;h3 id=&quot;二、简析服务礼仪&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="生活" scheme="http://www.echodemo.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="读书笔记" scheme="http://www.echodemo.cc/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>豆瓣入门单反购买文章推荐</title>
    <link href="http://www.echodemo.cc/2018/06/14/%E8%B1%86%E7%93%A3%E5%85%A5%E9%97%A8%E5%8D%95%E5%8F%8D%E8%B4%AD%E4%B9%B0%E6%96%87%E7%AB%A0%E6%8E%A8%E8%8D%90/"/>
    <id>http://www.echodemo.cc/2018/06/14/豆瓣入门单反购买文章推荐/</id>
    <published>2018-06-14T12:47:04.000Z</published>
    <updated>2018-06-14T13:06:09.927Z</updated>
    
    <content type="html"><![CDATA[<p>1、<a href="https://www.douban.com/note/662799586/" target="_blank" rel="noopener">单反购机指南</a></p><p>2、<a href="https://www.douban.com/note/664275766/" target="_blank" rel="noopener">微单购机指南</a></p><p>3、<a href="https://www.douban.com/note/666401386/" target="_blank" rel="noopener">索尼微单购机指南</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、&lt;a href=&quot;https://www.douban.com/note/662799586/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;单反购机指南&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;a href=&quot;https://www.douban.com/not
      
    
    </summary>
    
      <category term="生活" scheme="http://www.echodemo.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="PS" scheme="http://www.echodemo.cc/tags/PS/"/>
    
  </entry>
  
  <entry>
    <title>昨夜同门云集推杯又换盏</title>
    <link href="http://www.echodemo.cc/2018/06/10/%E6%98%A8%E5%A4%9C%E5%90%8C%E9%97%A8%E4%BA%91%E9%9B%86%E6%8E%A8%E6%9D%AF%E5%8F%88%E6%8D%A2%E7%9B%8F/"/>
    <id>http://www.echodemo.cc/2018/06/10/昨夜同门云集推杯又换盏/</id>
    <published>2018-06-09T16:25:30.000Z</published>
    <updated>2018-06-13T11:26:08.566Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果有一些文字需要留给渐行渐远的昨日，那我想此时写下应是恰如其分的。从时光的长河里回溯，逆流而上，我将在哪个渡口停留呢？想了很多，试着写下，但却觉得文字的表述在此刻显得如此地苍白无力。貌似无法承载情感的洪流，犹如昨日的暴雨落地，地面的流水浩浩汤汤，奔涌而去，却仍然没有停止的迹象。或许过后回望，会像雨过天晴之后晨梦亭里的独坐、鸟儿与青蛙的鸣唱、不远处飘来的荷香还有洗净的天空那样云淡而风轻。但最为珍贵的仍是属于当下的自己，当下的我们。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;如果有一些文字需要留给渐行渐远的昨日，那我想此时写下应是恰如其分的。从时光的长河里回溯，逆流而上，我将在哪个渡口停留呢？想了很多，试着写下，但却觉得文字的表述在此刻显得如此地苍白无力。貌似无
      
    
    </summary>
    
      <category term="生活" scheme="http://www.echodemo.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="日志" scheme="http://www.echodemo.cc/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>《非暴力沟通》摘句</title>
    <link href="http://www.echodemo.cc/2018/06/04/%E3%80%8A%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A%E3%80%8B%E6%91%98%E5%8F%A5/"/>
    <id>http://www.echodemo.cc/2018/06/04/《非暴力沟通》摘句/</id>
    <published>2018-06-04T11:30:43.000Z</published>
    <updated>2018-06-13T12:01:37.964Z</updated>
    
    <content type="html"><![CDATA[<p>1、非暴力生活的一个关键就是：感激生活的赐予，而不贪心。</p><p>2、非暴力沟通提醒我们专注于彼此的观察、感受、需要和请求。它鼓励倾听，培育尊重与爱，使我们情意相通，乐于互助。</p><p>3、非暴力沟通四要素。首先：留意发生的事情，说出人们所做的事情，清楚地表达观察结果，而不判断或评估。其次：表达感受。然后：说出哪些需要导致那样的感受，诚实地表达自己。最后：提出具体的请求。</p><p>4、暴力的根源在于人们忽视彼此的感受与需要，而将冲突归咎于对方。</p><p>5、我这样做，因为我想……陈述观察……我（感到）……因为我……</p><p>6、我们大多数的人使用的语言倾向于评判、比较、命令和指责，而不是鼓励我们倾听彼此的感受和需要。</p><p>7、道德评判就是其中的一种，它将不符合我们价值观的人看作是不道德的或邪恶的。进行比较也是一种评判，它会蒙蔽对人对己的爱意。异化的沟通方式还淡化了我们对自己的思想、情感和行为的责任意识。此外，强人所难也会造成心灵的隔阂。</p><p>8、如果我们通过批评来提出主张，人们的反应常常是申辩或反击。反之，如果我们直接说出需要，其他人就较有可能作出积极的回应。</p><p>9、真诚待人比委曲求全更为可贵。如果别人感到不安，我们可以认真地倾听，但无须责备自己。</p><p>10、我们提出的请求越具体越好。如果我们的意思含糊不清，别人就难以了解我们到底想要什么。使用抽象的语言还会使我们无法深入了解自己。请求他人采取具体的行动将揭示我们的动机。</p><p>11、如果我们只是表达自己的感受，别人可能就不清楚我们想要什么。</p><p>12、由于我们所要表达的意思与别人的理解有可能不一致，有时，我们需要请求他人的反馈。特别是在集体讨论中发言时，我们需要清楚地表明自己的期待。否则，讨论可能只是在浪费大家的时间。</p><p>13、在我们的文化中，直接谈论一个人的感受是很少见的。重要的是，我已经不再把他的话看作是对我的攻击，而注意体会他的感受和需要。</p><p>14、为了倾听他人，我们需要先放下已有的想法和判断，全心全意地体会对方。倾听他人有助于对他人的理解和接纳。</p><p>15、听到不中听的话时，我们有四种选择：1.责备自己；2.指责他人；3.体会自己的感受和需要；4.体会他人的感受和需要。</p><p>16、如果你希望自己在生气的时候也能运用非暴力沟通，我建议你做以下的练习。在前面，我们已经提到，我们生气是因为我们的想法——我们认为人们“应该”或“不应该”做什么，我们还给人贴上各种标签，并说长论短。请留意我们头脑中“我不喜欢抽烟的人……”之类的想法。然后，问自己：“我不喜欢他们……，是因为我什么样的需要没有得到满足？”通过这样的方式，我们就把注意力放在了尚未得到满足的需要，而不是考虑他人有什么过错。</p><p>17、在生气时，批评和指责他人都无法真正传达我们的心声。如果想充分表达愤怒，我们就不能归咎于他人，而把注意力放在自己的感受和需要上。与批评和指责他人相比，直接说出我们的需要更有可能使我们的愿望得到满足。表达愤怒的四个步骤是：（1）停下来，除了呼吸，什么都别做；（2）想一想是什么想法使我们生气了；（3）体会自己的需要；（4）表达感受和尚未满足的需要。有时，在第3步和第4步之间，我们需要先倾听他人。在得到倾听和理解之后，他们也就可以静下心来体会我们的感受和需要。</p><p>18、在使用惩罚性的强制力时，我们认为某些人是邪恶的，为了让他们悔改，必须给他们一点颜色看看。此时，我们希望痛苦能让他们：（1）意识到自己的过错；（2）感到懊悔；（3）改变行为。然而，在实际生活中，惩罚往往加强了对方的敌意和抵触心理，使双方的关系更加疏远。</p><p>19、个人的成长是通过与他人的坦诚交流来实现的——在交流中，彼此能够自由地表达内心的软弱。</p><p>20、非暴力沟通表达感激的方式包含三个部分：1.对方做了什么事情使我们的生活得到了改善；2.我们有哪些需要得到了满足；3.我们的心情怎么样？</p><p>21、诚实地表达自己，而不批评、指责（1）观察我所观察（看、听、回忆、想）到的有助于（或无助于）我的福祉的具体行为：“当我（看、听、想到我看到的/听到的） ……”（2）感受对于这些行为，我有什么样的感受（情感而非思想）：“我感到……”（3）需要什么样的需要或价值（而非偏好或某种具体的行为）导致我那样的感受：“因为我需要／看重……”（4）请求清楚地请求（而非命令）那些能丰富我生命的具体行为：“你是否愿意……？”</p><p>22、关切地倾听他人，而不解读为批评或指责（1）观察你所观察（看、听、回忆、想）到的有助于（或无助于）你的福祉的具体行为：“当你（看、听、想到你看到的/听到的） ……”（2）感受对于这些行为，你有什么样的感受（是情感而非思想）：“你感到……吗？”（3）需要什么样的需要或价值（而非偏好或某种具体的行为）导致你那样的感受：“因为你需要／看重……”（4）请求关切地倾听那些能丰富你生命的具体请求，而不解读为命令：“所以，你想……”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、非暴力生活的一个关键就是：感激生活的赐予，而不贪心。&lt;/p&gt;
&lt;p&gt;2、非暴力沟通提醒我们专注于彼此的观察、感受、需要和请求。它鼓励倾听，培育尊重与爱，使我们情意相通，乐于互助。&lt;/p&gt;
&lt;p&gt;3、非暴力沟通四要素。首先：留意发生的事情，说出人们所做的事情，清楚地表达观
      
    
    </summary>
    
      <category term="生活" scheme="http://www.echodemo.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="读书笔记" scheme="http://www.echodemo.cc/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>PS制图</title>
    <link href="http://www.echodemo.cc/2018/06/03/PS%E5%88%B6%E5%9B%BE/"/>
    <id>http://www.echodemo.cc/2018/06/03/PS制图/</id>
    <published>2018-06-03T12:24:31.000Z</published>
    <updated>2018-06-03T12:25:44.580Z</updated>
    
    <content type="html"><![CDATA[<p>1、一寸照的尺寸为：宽度2.5厘米，高度3.5厘米，分辨率设为300，选择CMYK颜色。将图片拖入新建的空白图片当中，快捷键Ctrl+T进行自由变换(如果此时看不到控点，可以通过Ctrl+减号快捷键来进行缩小)。如果需要变换背景色，则使用快速选择工具选择空白区域。然后按住Alt键来添加图层蒙版。此时可以删除背景图层，选中蒙版来对图层蒙版进行调节。接下来新建一个图层，下拉到带有蒙版的图层的下方，再进行颜色填充即可。如果此时还需要对服装进行变换，那么就将做好选区的衣服图片拖入图中进行变换。之后还可以建立矩形选区，通过Ctrl+T快捷键，然后通过移动来消除譬如T恤这种色块。最后保存为jpg格式。</p><p>如果需要将一寸照片打印多张在一张国际标准纸张上面。那么可以新建一个文件，选择国际标准纸张，选择CMYK模式，然后将刚才的jpg文件移动到新建的纸张里面。可以通过Ctrl+R快捷键调出标尺，然后拖出两条分别距离左顶点一厘米的参考线，回车之后。双击图层，打开图层样式，勾选描边，像素设置为5像素，位置选择内部，颜色选择白色，点击确定。然后在移动工具下按住Alt键来拖拽图片进行复制。当复制出两个之后，在图层工作区上选择两个图层继续按住Alt键来复制，这样以此类推，就可以不需要一张一张复制，而是以2的幂次方递增了。在复制出一整行图片之后，可以在图层的缩览图当中选择最小的样式，之后选择所有的图层，使用Ctrl+E将他们全部合并为一个图层。此时用之前的复制方法就可以很快地对图片进行复制，直到基本铺满整个国际标准纸张。</p><p>2、制作全景图片：在文件菜单中选择脚本，将脚本载入堆栈，然后选择文件夹，打开。选择所有的图层，选择移动工具，在移动工具菜单栏的最右边选择自动对齐图层，常规情况下选择自动即可，点击确定。接下来继续选中这些图层，在编辑菜单中选择自动混合图层，选择全景图，点击确定。然后再对图片进行裁剪。自动回合图层还可以用于堆叠混合。</p><p>3、服装操控变形：打开图像，在编辑菜单栏中选择操控变形选项。在图片中打上图钉之后即可进行变形，图钉深度可以将图钉在前面和后面进行切换。</p><p>4、内容识别比例：打开图片，使用套索工具对需要进行放大或者是缩小的部分进行大致地选取，然后右击鼠标进行存储选区，接下来Ctrl+D取消选区。在编辑菜单当中，选择内容识别比例，在保护项当中选取刚才存储的选区。如果选取的是人物，还可以勾选，保护项后面的保护肤色选项。</p><p>5、图层复制：按住Alt键直接拖拽来复制图层。在图层面板中将图层移动到新建图层按钮上。也可以通过快捷键Ctrl+J来复制图层。</p><p>选区复制：按住Alt键来对选区进行拖拽即可，这样复制出来的是在同一个图层。如果是通过快捷键Ctrl+J来复制选区的话，就是新建出了一个只包含选区内容的图层。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、一寸照的尺寸为：宽度2.5厘米，高度3.5厘米，分辨率设为300，选择CMYK颜色。将图片拖入新建的空白图片当中，快捷键Ctrl+T进行自由变换(如果此时看不到控点，可以通过Ctrl+减号快捷键来进行缩小)。如果需要变换背景色，则使用快速选择工具选择空白区域。然后按住A
      
    
    </summary>
    
      <category term="生活" scheme="http://www.echodemo.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="PS" scheme="http://www.echodemo.cc/tags/PS/"/>
    
  </entry>
  
  <entry>
    <title>PS抠图</title>
    <link href="http://www.echodemo.cc/2018/05/31/PS%E6%8A%A0%E5%9B%BE/"/>
    <id>http://www.echodemo.cc/2018/05/31/PS抠图/</id>
    <published>2018-05-31T01:47:29.000Z</published>
    <updated>2018-05-31T01:49:37.137Z</updated>
    
    <content type="html"><![CDATA[<p>1、调整边缘抠图：先使用快速选择工具做出选区，然后通过调整边缘(选择并遮住)来调整。先选择黑底，然后根据需要来调整半径，平滑，羽化(对比度)，移动边缘等命令。之后新建带有图层蒙版的图层。</p><p>2、当打开一张已经抠好的图片，并且此时没有设置蒙版，那么为了节省时间可以使用图层下拉菜单中的修边选项中的各个命令来处理图片的边缘。</p><p>3、钢笔工具抠图：选择钢笔工具，选择路径选项，建立锚点直到闭合选区。添加矢量蒙版，选择减去顶层形状来，通过新建锚点来再建一条路径(此时需要选中蒙版来操作)，直到闭合路径。新建图层，添加背景。之后可以对图片中局部镂空的地方，继续选择减去顶层形状来做精细的路径抠图(依然需要选中蒙版才能进行操作)。在这之后，我们还可以选择路径选择工具和直接选择工具对路径进行再调整。</p><p>4、蒙版抠图：通过蒙版来进行粗抠图，可以产生不一样的效果，使用椭圆选区大致地选出需要抠取的部分，在选择下拉菜单当中选择修改中的羽化，建立蒙版。将其拖入其他的图片当中进行变换即可。</p><p>融合两张图片：可以先将一张图片拖入另一张图片，然后对拖入的图片创建蒙版。选中蒙版，使用黑白渐变工具(这里注意前景色和背景色)，然后进行渐变调节，即可将两张图片融合在一起。如果是有倒影的情况，可以选中图层，然后进行复制，右击进行垂直翻转，同时选择正片叠底，再降低它的不透明度即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、调整边缘抠图：先使用快速选择工具做出选区，然后通过调整边缘(选择并遮住)来调整。先选择黑底，然后根据需要来调整半径，平滑，羽化(对比度)，移动边缘等命令。之后新建带有图层蒙版的图层。&lt;/p&gt;
&lt;p&gt;2、当打开一张已经抠好的图片，并且此时没有设置蒙版，那么为了节省时间可以
      
    
    </summary>
    
      <category term="生活" scheme="http://www.echodemo.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="PS" scheme="http://www.echodemo.cc/tags/PS/"/>
    
  </entry>
  
  <entry>
    <title>PS基础知识(杂)</title>
    <link href="http://www.echodemo.cc/2018/05/30/PS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E6%9D%82)/"/>
    <id>http://www.echodemo.cc/2018/05/30/PS基础知识(杂)/</id>
    <published>2018-05-30T10:55:38.000Z</published>
    <updated>2018-05-30T11:08:59.636Z</updated>
    
    <content type="html"><![CDATA[<p>1、分辨率和图片的用途是相关的。常用分辨率设置：洗印照片：300或以上；杂志、名片等印刷物：300；海报高清写真：96~200；网络图片、网页界面：72；大型喷绘：25~50。总像素值=像素宽度X像素高度=文档宽度X文档高度X分辨率的平方</p><p>2、常用快捷键：</p><pre><code>(1)打开首选项：Ctrl+K(2)缩放图片：Alt+鼠标滚轮(3)新建时复位：按住Alt不松(4)打开文件：双击工作区(5)新建图层：Alt+创建图层(6)创建图层副本：Alt+拖拽至指定位置或者Ctrl+J(7)抓手工具：按住空格键不松(8)放大工具：空格+Ctrl(9)缩小工具：空格+Alt(10)快速填充前景色:Alt+delete(11)快速填充背景色:Ctrl+delete</code></pre><p>3、移动图层位置不变：在拖拽至另一个文件时，先按住Shift再松鼠标(前提是两个图像大小一样)。如果两个图像大小不一样的话，按上面操作会跑到正中央；如果图像中有选区，则跑到选区的正中央。在移动工具状态下，按住Ctrl键就可以自动选择图层。在非移动工具状态下，按住Ctrl键可以切换到移动工具状态。Shift键加方向键可以微调。</p><p>4、选区时按住Shift键，选框变成正方形。按住Alt键从中心点建立选区。Ctrl+D取消选区，Ctrl+Shift+D恢复之前的选区</p><p>5、套索工具按住Alt键可以在套索工具和多边形套索工具之间切换。磁性套索工具按住Alt键可以在磁性套索工具和多边形套索工具之间切换。delete键可以用于取消套索的上一个锚点。</p><p>6、按住Alt键，点击鼠标右键左右移动，改变画笔大小。上下移动改变画笔硬度。</p><p>7、虽然修复画笔工具和仿制图章工具共享仿制源，但是修复画笔工具不同于仿制图章工具。修复画笔工具更智能，它能够尽可能地和周围的环境进行融合。</p><p>8、通道的概念类似于图层的概念，只不过通道是从另一个角度(图像的色彩或透明度)来诠释图像的构成。 Alpha通道就是记录透明度信息的特殊层，在Alpha通道当中，黑色代表着透明，白色代表拥有颜色信息，不透明。说白了，通道当中的颜色代表的是当前通道的颜色强度(黑白灰)，而不是颜色本身。Alpha通道是一个选区加工厂。不管是通道还是图层，都可以通过按住Ctrl键，点击相应的通道或者是图层来建立相应的选区。</p><p>9、图层蒙版可以隐藏和显示图层上的部分区域，按住Alt键点击添加图层蒙版，隐藏的是选区的部分。按住Alt键点击建立好的图层蒙版，图层蒙版此时处于编辑状态之下，对应的是一个临时的Alpha通道。快速蒙版方便查看。</p><p>10、锁定透明像素：禁止对透明区域进行操作。快速建组：Ctrl+G。一个组合一个图层同时选中，Ctrl+G也可以再建组。取消分组：Ctrl+Shift+G。Ctrl+E向下合并图层，Ctrl+Alt+E向下合并并且保留向下合并的图层。创建图层剪贴蒙版，图层只能在下方图层内显示。</p><p>11、色相：颜色的品相。通过改变色相环上色彩的角度(一共360度)可以进行变色。从红色到蓝色需要逆时针旋转120度，就把色相的值变换为-120。从红色到绿色需要顺时针旋转120，就把色相的值变换为120。</p><p>饱和度：是指色彩的鲜艳程度，其实就是加入中性灰的程度。当饱和度降到最低的时候，图像显示的是灰色，灰色是没有色相的。灰色的红绿蓝RGB值是相等的，只要RGB值是相等的，那么只可能是黑、白、灰三种颜色。</p><p>明度：就是发光量，加入额外的白光。</p><p>RGB模式：光的三基色，它是发光色。</p><p>CMYK模式：印刷色彩模式。青色(Cyan)，品红色(Magenta)，黄色(Yellow)，黑色(Black)。代表印刷用的四种油墨，它是反光色。CMYK通道里面，黑色代表100%浓度的油墨。</p><p>12、色阶：是表示图像亮度强弱的指数标准，表现了一副图的明暗关系，它和颜色无关。通过色阶编辑框可以看出图片整体的明暗分布。移动X轴上的最左边的黑色滑块，如果从0移动到70，黑场的数值变大，画面变暗(仅是黑场部分发生了变化，而灰场和白场没有)，它是把亮度级别为70以下的像素，都合并为最低的0。调节黑场，就是合并暗部的颜色，对亮部暂无影响。如果是移动X轴最右边的白色滑块，从255移动到180的话，和黑色滑块的原理是一样的，再180到255这个亮度级别的像素，都合并成为255级别。</p><p>13、曲线命令：Ctrl+M。曲线直方图的X轴上的黑色滑块和白色滑块的功能和色阶上的对应滑块功能相似。所不同的是，它们是对整个图片的明暗度进行整体的变暗和变亮。而不仅仅是对移动滑块区域的像素进行调整。但对于复杂的图片来说，色阶、曲线等最好都去使用调整图层，这样可以针对图片的某个图层进行调整。</p><p>14、色彩平衡不同于色相的改变。保持明度，可以保证调整后的颜色发光总量不变。</p><p>15、使用钢笔工具时按住Shift键，可以根据角度来创建水平，垂直和45度的线段。在相应的路径点击回车，图像上的路径会被隐藏。黑色的路径选择工具是选择整体的，而白色的路径选择工具是选择单个的锚点的，按住Ctrl键可以在两者之间进行转换。按住Alt键，可以调节单个的控杆。Ctrl+enter将路径变成选区。文字可以依附路径的形状输入。</p><p>16、调节行距，字距。Alt+上下左右箭头就可以。在视图的显示当中有网格。视图当中的标尺可以在标尺的区域通过单击右键来修改单位，也可以从左上角的方块拉出十字交叉线来改变原点的位置，双击方块可以恢复到原状态。视图中可以新建参考线，也可以从标尺当中拖拽出参考线，按住Alt键来单击左键可以将水平和垂直的参考线进行转换，将参考线拉回标尺区域即可删除参考线。视图中的显示额外内容(Ctrl+H)，可以将隐藏参考线，网格以及选区。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、分辨率和图片的用途是相关的。常用分辨率设置：洗印照片：300或以上；杂志、名片等印刷物：300；海报高清写真：96~200；网络图片、网页界面：72；大型喷绘：25~50。总像素值=像素宽度X像素高度=文档宽度X文档高度X分辨率的平方&lt;/p&gt;
&lt;p&gt;2、常用快捷键：&lt;/
      
    
    </summary>
    
      <category term="生活" scheme="http://www.echodemo.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="PS" scheme="http://www.echodemo.cc/tags/PS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 从排序数组中删除重复项</title>
    <link href="http://www.echodemo.cc/2018/05/18/LeetCode-%E4%BB%8E%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <id>http://www.echodemo.cc/2018/05/18/LeetCode-从排序数组中删除重复项/</id>
    <published>2018-05-18T07:25:45.000Z</published>
    <updated>2018-05-18T07:28:46.071Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p><pre><code>示例 1:给定数组 nums = [1,1,2], 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 你不需要考虑数组中超出新长度后面的元素。示例 2:给定 nums = [0,0,1,1,1,2,2,3,3,4],函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。你不需要考虑数组中超出新长度后面的元素。</code></pre><p>说明:</p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><pre><code>// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝int len = removeDuplicates(nums);// 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。for (int i = 0; i &lt; len; i++) {    print(nums[i]);}</code></pre><p>题目代码：</p><pre><code>class Solution {public:    int removeDuplicates(vector&lt;int&gt;&amp; nums) {        if(nums.size()==0) return 0;        else if(nums.size()==1) return 1;        int i=1,k=1;        int len=nums.size();        while(k&lt;len){            if(nums[k-1]!=nums[k]){                nums[i++]=nums[k];            }            k++;        }        nums.erase(nums.begin()+i,nums.end());        return i;    }};</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。&lt;/p&gt;
&lt;p&gt;不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;示例 1:

给定数组 nums = 
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CPP" scheme="http://www.echodemo.cc/tags/CPP/"/>
    
      <category term="LeetCode" scheme="http://www.echodemo.cc/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LintCode 旋转字符串</title>
    <link href="http://www.echodemo.cc/2018/05/18/LintCode-%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://www.echodemo.cc/2018/05/18/LintCode-旋转字符串/</id>
    <published>2018-05-18T05:18:04.000Z</published>
    <updated>2018-05-18T05:50:05.772Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个字符串和一个偏移量，根据偏移量旋转字符串(从左向右旋转)</p><pre><code>样例：对于字符串 &quot;abcdefg&quot;.offset=0 =&gt; &quot;abcdefg&quot;offset=1 =&gt; &quot;gabcdef&quot;offset=2 =&gt; &quot;fgabcde&quot;offset=3 =&gt; &quot;efgabcd&quot;</code></pre><p>挑战：在数组上原地旋转，使用O(1)的额外空间</p><p>分析：注意offset为0和str长度为0的情况，还有offset大于str的长度的情况。</p><p>题目代码：</p><pre><code>class Solution {public:    /**     * @param str: An array of char     * @param offset: An integer     * @return: nothing     */    void rotateString(string &amp;str, int offset) {        // write your code here        if(str.size()==0) return;        if(offset==0) return;        int offs=offset%str.size();        reverse(str.begin(),str.end());        reverse(str.begin(),str.begin()+offs);        reverse(str.begin()+offs,str.end());    }};</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个字符串和一个偏移量，根据偏移量旋转字符串(从左向右旋转)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;样例：对于字符串 &amp;quot;abcdefg&amp;quot;.

offset=0 =&amp;gt; &amp;quot;abcdefg&amp;quot;
offset=1 =&amp;gt; &amp;quot;ga
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CPP" scheme="http://www.echodemo.cc/tags/CPP/"/>
    
      <category term="LintCode" scheme="http://www.echodemo.cc/tags/LintCode/"/>
    
  </entry>
  
  <entry>
    <title>买包子</title>
    <link href="http://www.echodemo.cc/2018/05/18/%E4%B9%B0%E5%8C%85%E5%AD%90/"/>
    <id>http://www.echodemo.cc/2018/05/18/买包子/</id>
    <published>2018-05-17T22:30:19.000Z</published>
    <updated>2018-05-30T11:11:53.344Z</updated>
    
    <content type="html"><![CDATA[<p>早上去九食堂买包子。</p><pre><code>我：“一个梅菜和一个扣肉。”对方：“梅菜和扣肉是同一种，同学。”</code></pre><p>等到付款的时候，点开支付宝。</p><pre><code>对方：“你这是收钱，不是付款，同学。”心里想：“是不是起早了，人也变傻了？”</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;早上去九食堂买包子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;我：“一个梅菜和一个扣肉。”
对方：“梅菜和扣肉是同一种，同学。”
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;等到付款的时候，点开支付宝。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;对方：“你这是收钱，不是付款，同学。”
心里想：“是不是起早了
      
    
    </summary>
    
      <category term="生活" scheme="http://www.echodemo.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="日志" scheme="http://www.echodemo.cc/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>博客</title>
    <link href="http://www.echodemo.cc/2018/05/18/%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.echodemo.cc/2018/05/18/博客/</id>
    <published>2018-05-17T22:25:28.000Z</published>
    <updated>2018-05-17T23:01:25.820Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在清晨的光里，校园中的枣树，梨树，桃树，柚子树，桔子树，杨梅树，紫叶李，还有枇杷树的果实均已挂满枝头，一派夏季欣欣向荣的景象。从莺飞草长的三月搭建博客至今，日志的数量在不知不觉间已经破百。那些无形的似水流年就在与键盘的敲击中悄悄地溜走，犹如匆匆而去的大学时光，此刻也即将消耗殆尽。怀着对诗词、书卷和生活的热爱，还有一入程序员之路深似海的决心（但写字不能成为路人）。日志当然也是要继续写下去的！记录时间的流逝，也记录自己来时的路。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在清晨的光里，校园中的枣树，梨树，桃树，柚子树，桔子树，杨梅树，紫叶李，还有枇杷树的果实均已挂满枝头，一派夏季欣欣向荣的景象。从莺飞草长的三月搭建博客至今，日志的数量在不知不觉间已经破百。那
      
    
    </summary>
    
      <category term="生活" scheme="http://www.echodemo.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="日志" scheme="http://www.echodemo.cc/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>LintCode 合并排序数组 II</title>
    <link href="http://www.echodemo.cc/2018/05/17/LintCode-%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84II/"/>
    <id>http://www.echodemo.cc/2018/05/17/LintCode-合并排序数组II/</id>
    <published>2018-05-17T14:53:47.000Z</published>
    <updated>2018-05-18T05:17:36.062Z</updated>
    
    <content type="html"><![CDATA[<p>合并两个排序的整数数组A和B变成一个新的数组。</p><pre><code>样例：给出A=[1,2,3,4]，B=[2,4,5,6]，返回 [1,2,2,3,4,4,5,6]</code></pre><p>挑战：你能否优化你的算法，如果其中一个数组很大而另一个数组很小？</p><p>题目代码：</p><pre><code>class Solution {public:    /**     * @param A: sorted integer array A     * @param B: sorted integer array B     * @return: A new sorted integer array     */    vector&lt;int&gt; mergeSortedArray(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B) {        // write your code here        int a=A.size();        int b=B.size();        int c=a+b;        vector&lt;int&gt; C(c);        int i=0,j=0,k=0;        while(i&lt;a&amp;&amp;j&lt;b){            if(A[i]&lt;=B[j]){                C[k++]=A[i++];            }else{                C[k++]=B[j++];            }        }        while(i&lt;a) C[k++]=A[i++];        while(j&lt;b) C[k++]=B[j++];        return C;    }};</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;合并两个排序的整数数组A和B变成一个新的数组。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;样例：给出A=[1,2,3,4]，B=[2,4,5,6]，返回 [1,2,2,3,4,4,5,6]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;挑战：你能否优化你的算法，如果其中一个数组很大而另一个数组很小？
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CPP" scheme="http://www.echodemo.cc/tags/CPP/"/>
    
      <category term="LintCode" scheme="http://www.echodemo.cc/tags/LintCode/"/>
    
  </entry>
  
  <entry>
    <title>LintCode 第k大元素</title>
    <link href="http://www.echodemo.cc/2018/05/17/LintCode-%E7%AC%ACk%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
    <id>http://www.echodemo.cc/2018/05/17/LintCode-第k大元素/</id>
    <published>2018-05-17T14:21:02.000Z</published>
    <updated>2018-05-17T14:52:36.212Z</updated>
    
    <content type="html"><![CDATA[<p>在数组中找到第k大的元素，你可以交换数组中的元素的位置。</p><pre><code>样例：给出数组 [9,3,2,4,8]，第三大的元素是 4</code></pre><p>给出数组 [1,2,3,4,5]，第一大的元素是 5，第二大的元素是 4，第三大的元素是 3，以此类推</p><pre><code>挑战：要求时间复杂度为O(n)，空间复杂度为O(1)</code></pre><p>题目代码：</p><pre><code>class Solution {public:    /*     * @param n: An integer     * @param nums: An array     * @return: the Kth largest element     */    int kthLargestElement(int n, vector&lt;int&gt; &amp;nums) {        // write your code here        int i=nums.size();        sort(nums.begin(),nums.end());        return nums[i-n];    }};</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在数组中找到第k大的元素，你可以交换数组中的元素的位置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;样例：给出数组 [9,3,2,4,8]，第三大的元素是 4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;给出数组 [1,2,3,4,5]，第一大的元素是 5，第二大的元素是 4，第三大的元素是 3，
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CPP" scheme="http://www.echodemo.cc/tags/CPP/"/>
    
      <category term="LintCode" scheme="http://www.echodemo.cc/tags/LintCode/"/>
    
  </entry>
  
  <entry>
    <title>LintCode 丑数 II</title>
    <link href="http://www.echodemo.cc/2018/05/15/LintCode-%E4%B8%91%E6%95%B0II/"/>
    <id>http://www.echodemo.cc/2018/05/15/LintCode-丑数II/</id>
    <published>2018-05-15T01:35:32.000Z</published>
    <updated>2018-05-15T02:49:19.449Z</updated>
    
    <content type="html"><![CDATA[<p>设计一个算法，找出只含素因子2，3，5 的第 n 小的数。</p><p>符合条件的数如：1, 2, 3, 4, 5, 6, 8, 9, 10, 12…</p><p>我们可以认为1也是一个丑数</p><pre><code>样例：如果n = 9， 返回 10</code></pre><p>挑战：要求时间复杂度为O(nlogn)或者O(n)</p><p>方法一：如果采用遍历的方式，无法完全通过，会造成超时。</p><pre><code>class Solution {public:    /**     * @param n: An integer     * @return: the nth prime number as description.     */    long long nthUglyNumber(int n) {        // write your code here        int count = 0;          int i = 0;            while(count &lt; n)          {              m++;              int number = i;              while(number % 2 == 0)                  number = number / 2;              while(number % 3 == 0)                  number = number / 3;              while(number % 5 == 0)                  number = number / 5;              if(number == 1)              {                  count++;              }          }          return i;      }};</code></pre><p>方法二：是从1开始构造丑数，然后依次计数。</p><pre><code>class Solution {public:    /*     * @param n an integer     * @return the nth prime number as description.     */    int nthUglyNumber(int n) {        // write your code here        int count = 1;//统计丑数        vector&lt;int&gt; ugly(n,0);//保存丑数        ugly[0] = 1;//第一个丑数        vector&lt;int&gt; idx(3,0);        while(count &lt; n)        {            int a = 2 * ugly[idx[0]];            int b = 3 * ugly[idx[1]];            int c = 5 * ugly[idx[2]];            int temp = min(min(a, b), c);            if(temp == a)              ++idx[0];            if(temp == b)              ++idx[1];            if(temp == c)              ++idx[2];            ugly[count] = temp;            ++count;        }        return ugly[n-1];    }};</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;设计一个算法，找出只含素因子2，3，5 的第 n 小的数。&lt;/p&gt;
&lt;p&gt;符合条件的数如：1, 2, 3, 4, 5, 6, 8, 9, 10, 12…&lt;/p&gt;
&lt;p&gt;我们可以认为1也是一个丑数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;样例：如果n = 9， 返回 10
&lt;/code
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CPP" scheme="http://www.echodemo.cc/tags/CPP/"/>
    
      <category term="LintCode" scheme="http://www.echodemo.cc/tags/LintCode/"/>
    
  </entry>
  
  <entry>
    <title>不孝有三，无后为大？</title>
    <link href="http://www.echodemo.cc/2018/05/14/%E4%B8%8D%E5%AD%9D%E6%9C%89%E4%B8%89%EF%BC%8C%E6%97%A0%E5%90%8E%E4%B8%BA%E5%A4%A7%EF%BC%9F/"/>
    <id>http://www.echodemo.cc/2018/05/14/不孝有三，无后为大？/</id>
    <published>2018-05-14T02:21:06.000Z</published>
    <updated>2018-05-16T01:28:51.964Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“不孝有三，无后为大”这八字言语基本上作为炎黄子孙的一员都曾有所耳闻。此语出自《孟子离娄上》：“不孝有三，无后为大。舜不告而娶，为无后也。君子以为犹告也。”</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;传统的观点认为：无后就是指没有后代，更准确地来说是没有子嗣的意思。然而孟子在《离娄章句下》中说：“世俗所谓不孝者五：惰其四支，不顾父母之养，一不孝也；博弈好饮酒，不顾父母之养，二不孝也；好货财，私妻子，不顾父母之养，三不孝也；从耳目之欲，以为父母戮，四不孝也；好勇斗狠，以危父母，五不孝也。”如果说“无后”是指没有后代的话，那么这里的五不孝中肯定有一条是“无后”，但是五不孝中没有一条提及“没有后代”。另外，再来看“不孝有三，无后为大”的后文，说的是：舜不告而娶，为无后也。舜没有告知父母就擅自娶妻，为无后也。这里的“为”字可以表承接关系“就是”的意思，也可以表目的“为了”的意思。然而不管哪一种说法，都与传统的意思不符。第一，取了妻子怎么能说就是没有后代呢，恰恰相反，娶妻就是为了能够繁衍后代；第二，取了妻子又怎么能说是为了没有后代呢。这些都明显和上文“舜不告而娶”的意思不衔接，跨度未免太大些了。最后孟子还说到：君子认为应该把娶妻这件事情告诉父母，这和没有子嗣又有何关系呢？话说像亚圣这种高智慧生物，怎么会犯如此低级的逻辑错误呢？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么如果采用第二种观点，“无后”指没有尽到后辈的责任也就都能够说的通了。首先，孟子的五不孝讲的都是后辈未尽之责，同时在古文当中使用具体的数字时常常是虚指而并非实指，用三来代五也完全说的过去。例如：飞流直下三千尺。三人行，必有我师焉。军书十二卷，卷卷有爷名。等都是虚指。其次，下文的舜不告而娶，就是没有尽到后辈的责任和君子认为应该把娶妻这件事情告诉父母的意思也都衔接得恰到好处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;“不孝有三，无后为大”这八字言语基本上作为炎黄子孙的一员都曾有所耳闻。此语出自《孟子离娄上》：“不孝有三，无后为大。舜不告而娶，为无后也。君子以为犹告也。”&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nb
      
    
    </summary>
    
      <category term="生活" scheme="http://www.echodemo.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="随笔" scheme="http://www.echodemo.cc/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>《生活教会你》摘句</title>
    <link href="http://www.echodemo.cc/2018/05/13/%E3%80%8A%E7%94%9F%E6%B4%BB%E6%95%99%E4%BC%9A%E4%BD%A0%E3%80%8B%E6%91%98%E5%8F%A5/"/>
    <id>http://www.echodemo.cc/2018/05/13/《生活教会你》摘句/</id>
    <published>2018-05-13T06:32:39.000Z</published>
    <updated>2018-05-13T06:38:46.136Z</updated>
    
    <content type="html"><![CDATA[<p>在读完读完本书的第一章之后，我想：这真是一本好书，如此多的发人深省的话语，着实让人钦佩。这不是心灵鸡汤，而是自己内心也十分认可的观点。但随着章节的推移，内容虽然不像前面那么让我着迷，但丝毫没有影响我在豆瓣为它打上四星的评分。</p><p>1、对儿童教育而言，最重要的是让孩子拥有好奇心、兴趣、想象力以及对生活的探索精神。</p><p>2、我们在家和学校接受教育，最重要的是，我们从生活本身接受教育。学习应当贯穿我们的一生。生命总是在不断变动，要么前进，要么后退。只有当一个人在不断成长时，生活才会有趣；换句话说，只有当我们仍对生活怀有兴趣时，才能取得成长。</p><p>3、杜威的这种进步主义教育并不试图将孩子引向他不愿去的地方。孩子不会被逼着遵守什么准则，除非他自己乐意去做或认为值得去做。</p><p>4、从长远来看，有价值的并非是一个人读了什么书，而是独立思考并吸收了什么东西，是通过阅读激发的那些想法和感觉。正是你自己的想法，独立思考得出的那些想法，使你成为一个有意思的人。</p><p>5、通过别人来激发自己的兴趣—在我看来，这是效率最高、最有收获的教育方法之一。你要做的只是去寻找这个兴趣点。这会让每段经历都成为一种挑战，并使人永葆好奇—好奇心是一个人最宝贵的品质之一。</p><p>6、每个孩子的“为什么”都应得到尊重，得到用心的回答。如果你不知道问题的答案（实际情况通常如此），那就带着孩子一起寻找答案。</p><p>7、当我逐渐真正观察起周围的事物，试着去理解它们时，生活中的每件事情都变得更加有趣，也更有价值。这就像以三维视角去看一张二维的照片，看待问题有了更多的深度。</p><p>8、好在，每当我们与恐惧作战时，哪怕当时认为它不可战胜，哪怕在过程中受尽折磨，只要经受住痛苦，克服了恐惧，你会发现获得了更大的自由。一个人只要经受住一次这种考验，就可以经受住任何事情。每一次与恐惧的正面对决都会让我们收获力量、勇气与自信。</p><p>9、放下自我。如果你能放下自我，不去想是否给别人留下好印象，不去管人们怎么看你，反过来替别人着想，你就不会再感到胆怯和恐惧。恐惧在很大程度上是由于缺乏了解。我们不知道在新环境会发生什么，也不知道自己能否应对。越早知道会发生什么，就能越早从恐惧中解脱出来。</p><p>10、“我做不到。”这种话说来容易。实际上，你会发现其实自己做得到。尝试去做某件事情不仅能让自己摆脱恐惧的束缚，还能锻炼承受能力，并从成就感中获得自由。</p><p>11、我自己一般有三种办法：第一，保持内心平静，以使工作时不受周围环境影响；第二，专注在手头的事情上；第三，建立起生活规律，分配好时间，提前计划每件事情，同时又留有余地以备不患。除此之外，还有一点也很重要：那就是保持身体健康，保证有充沛的精力可用。</p><p>12、一个人只有愿意接受自身存在不足这一残酷事实，愿意做出调整去适应它，才算得上真正的成熟。成熟的一个重要部分，就是不仅接受自己的缺点，也接纳你所爱之人的缺点，并尽可能地帮助他们避免出错。</p><p>13、“对自己和身边的人诚实以待；在生活和工作中竭尽全力；拥有爱别人的能力。”实际上，获得快乐还有一个条件，当时我不知为何落了这条：那就是感到自己是一个有用的人。</p><p>14、对大部分人来说，渴望被他人需要的愿望比自己意识到的还要强烈。人们常说一个人需要表现自我，但是一般来说，表现自我带来的满足感不如满足他人带来的满足感多。</p><p>15、我们总以为每个人都想得到自由，但事实并非如此。对很多人来说，放弃自由，让别人指导自己，让别人给自己做决定，比为自己和自己的决定负责要快乐得多。他们不想自己动脑，也不想自己做主。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在读完读完本书的第一章之后，我想：这真是一本好书，如此多的发人深省的话语，着实让人钦佩。这不是心灵鸡汤，而是自己内心也十分认可的观点。但随着章节的推移，内容虽然不像前面那么让我着迷，但丝毫没有影响我在豆瓣为它打上四星的评分。&lt;/p&gt;
&lt;p&gt;1、对儿童教育而言，最重要的是让孩
      
    
    </summary>
    
      <category term="生活" scheme="http://www.echodemo.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="读书笔记" scheme="http://www.echodemo.cc/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>LintCode 统计数字</title>
    <link href="http://www.echodemo.cc/2018/05/13/LintCode-%E7%BB%9F%E8%AE%A1%E6%95%B0%E5%AD%97/"/>
    <id>http://www.echodemo.cc/2018/05/13/LintCode-统计数字/</id>
    <published>2018-05-13T00:54:21.000Z</published>
    <updated>2018-05-13T01:01:30.721Z</updated>
    
    <content type="html"><![CDATA[<p>计算数字k在0到n中的出现的次数，k可能是0~9的一个值</p><p>样例：例如n=12，k=1，在 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]，我们发现1出现了5次 (1, 10, 11, 12)</p><p>分析：基本就是遍历了，不过要注意的就是0要特别处理。还有在遍历之后的数值处理需要交给临时变量，而不是用遍历数本身。</p><pre><code>class Solution {public:    /*     * @param : An integer     * @param : An integer     * @return: An integer denote the count of digit k in 1..n     */    int digitCounts(int k, int n) {        // write your code here        int count=0;        if(k==0) count++;        for(int i=k;i&lt;=n;i++){            int temp=i;            while(temp){                if(temp%10==k) count++;                temp/=10;            }        }        return count;    }};</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;计算数字k在0到n中的出现的次数，k可能是0~9的一个值&lt;/p&gt;
&lt;p&gt;样例：例如n=12，k=1，在 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]，我们发现1出现了5次 (1, 10, 11, 12)&lt;/p&gt;
&lt;p&gt;分析：基本就是遍
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CPP" scheme="http://www.echodemo.cc/tags/CPP/"/>
    
      <category term="LintCode" scheme="http://www.echodemo.cc/tags/LintCode/"/>
    
  </entry>
  
</feed>
