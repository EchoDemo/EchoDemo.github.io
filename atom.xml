<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EchoDemo&#39;s Blogs</title>
  
  <subtitle>自我管理，知识管理，时间管理，阅读。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.echodemo.cc/"/>
  <updated>2018-03-19T02:28:27.444Z</updated>
  <id>http://www.echodemo.cc/</id>
  
  <author>
    <name>EchoDemo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PAT A1060 Are They Equal</title>
    <link href="http://www.echodemo.cc/2018/03/19/PAT-A1060-Are-They-Equal/"/>
    <id>http://www.echodemo.cc/2018/03/19/PAT-A1060-Are-They-Equal/</id>
    <published>2018-03-19T02:21:15.000Z</published>
    <updated>2018-03-19T02:28:27.444Z</updated>
    
    <content type="html"><![CDATA[<p>If a machine can save only 3 significant digits, the float numbers 12300 and 12358.9 are considered equal since they are both saved as 0.123*105 with simple chopping. Now given the number of significant digits on a machine and two float numbers, you are supposed to tell if they are treated equal in that machine.</p><p>Input Specification:<br>Each input file contains one test case which gives three numbers N, A and B, where N (&lt;100) is the number of significant digits, and A and B are the two float numbers to be compared. Each float number is non-negative, no greater than 10100, and that its total digit number is less than 100.</p><p>Output Specification:<br>For each test case, print in a line “YES” if the two numbers are treated equal, and then the number in the standard form “0.d1…dN*10^k” (d1&gt;0 unless the number is 0); or “NO” if they are not treated equal, and then the two numbers in their standard form. All the terms must be separated by a space, with no extra space at the end of a line.<br>Note: Simple chopping is assumed without rounding.</p><pre><code>Sample Input 1:3 12300 12358.9Sample Output 1:YES 0.123*10^5Sample Input 2:3 120 128Sample Output 2:NO 0.120*10^3 0.128*10^3</code></pre><p>题目大意：给出两个数，问将它们写成保留N位小数的科学计数法后是否相等。如果相等，输出YES，同时输出他们的科学记数法表示的方式；如果不相等输出NO，分别输出他们的科学计数法表示方式。</p><p>注意：无需四舍五入。</p><p>分析：将两个数以字符串的形式输入，如果他们有前导0则删除前导0。删除前导0之后会碰到两种情况：如果是小数点，说明这个数小于1，接下来将小数点删除，如果删除小数点之后的那个数值是0需要把0删除同时令指数相应地减1，直到不为0为止；如果不是小数点的话，则在while循环当中去寻找后面可能存在的小数点，在没有找到小数点之前，字符串下标每向后移动一位，指数便加1。跳出while循环之后，如果字符串下标小于字符串此时的长度，说明找到了小数点，删除小数点。在这两种情况都处理完之后，如果字符串的长度为0，则说明这个数为0。接下来令数组下标为0，在while循环中只要题目要求的精度没有达到就不断执行。而只要字符串此时的下标还小于字符串的长度就直接把数字加到新字符串的末尾，否则就添0。</p><pre><code>#include &quot;stdafx.h&quot;#include&lt;iostream&gt;#include&lt;stdlib.h&gt;#include&lt;string&gt;using namespace std;int n;//有效位数string deal(string s, int &amp;e) {    int k = 0;//s的下标    while (s.length() &gt; 0 &amp;&amp; s[0] == &apos;0&apos;) {        s.erase(s.begin());//删除前导0    }    if (s[0] == &apos;.&apos;) {//删除前导0之后是小数点，说明s是小于1的小数        s.erase(s.begin());//删除小数点        while (s.length() &gt; 0 &amp;&amp; s[0] == &apos;0&apos;) {            s.erase(s.begin());//删除小数点后非0位前的所有0            e--;//每删除一个0，指数就减1        }    }else {//删除前导0之后不是小数点，则找到后面的小数点删除        while (k &lt; s.length() &amp;&amp; s[k] != &apos;.&apos;) {            k++;            e++;//只要没碰到小数点指数就加1        }        if (k &lt; s.length())            s.erase(s.begin() + k);//如果此时k&lt;s.length()则说明碰到了小数点，删除小数点    }    if (s.length() == 0) e = 0;//删除前导0之后s的长度变为0，说明这个数是0    int num = 0;    k = 0;    string res;    while (num &lt; n) {        if (k &lt; s.length()) res += s[k++];//只要还有数字，就加到res的末尾        else res += &apos;0&apos;;//否则就在res的末尾加0        num++;//精度加1    }    return res;}int main() {    string s1, s2, s3, s4;    cin &gt;&gt; n &gt;&gt; s1 &gt;&gt; s2;    int e1 = 0, e2 = 0;    s3 = deal(s1, e1);    s4 = deal(s2, e2);    if (s3 == s4&amp;&amp;e1 == e2)        cout &lt;&lt; &quot;YES 0.&quot; &lt;&lt; s3 &lt;&lt; &quot;*10^&quot; &lt;&lt; e1 &lt;&lt; endl;    else        cout &lt;&lt; &quot;NO 0.&quot; &lt;&lt; s3 &lt;&lt; &quot;*10^&quot; &lt;&lt; e1 &lt;&lt; &quot; 0.&quot; &lt;&lt; s4 &lt;&lt; &quot;*10^&quot;&lt;&lt; e2 &lt;&lt; endl;    system(&quot;pause&quot;);    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If a machine can save only 3 significant digits, the float numbers 12300 and 12358.9 are considered equal since they are both saved as 0.
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C++" scheme="http://www.echodemo.cc/tags/C/"/>
    
      <category term="PAT A" scheme="http://www.echodemo.cc/tags/PAT-A/"/>
    
  </entry>
  
  <entry>
    <title>C++中的sort函数</title>
    <link href="http://www.echodemo.cc/2018/03/18/C++%E4%B8%AD%E7%9A%84sort%E5%87%BD%E6%95%B0/"/>
    <id>http://www.echodemo.cc/2018/03/18/C++中的sort函数/</id>
    <published>2018-03-18T13:57:42.000Z</published>
    <updated>2018-03-18T13:59:27.160Z</updated>
    
    <content type="html"><![CDATA[<p>sort()函数使用的排序方法是类似于快排的方法，时间复杂度为n*log2(n)。要使用algorithm头文件下的sort()函数,需要加上#include<algorithm>头文件和”using namespace std;”</algorithm></p><p>1、在介绍sort()函数之前,先来了解algorithm头文件下一些其他的函数</p><pre><code>(1)max(x,y)和min(x,y)分别返回x和y中的最大值和最小值(x和y可以是浮点数)。(2)abs(x)返回x的绝对值,这里的x必须是整数,浮点数需要使用math头文件下的fabs。(3)swap()用来交换x和y的值,注意:这里的swap()函数和Java中的swap()函数有着本质的不同。(4)reverse(x,y)将数组指针在[x,y)之间的元素或容器的迭代器在[x,y)范围内的元素进行反转。(5)next_permutation(x,y)给出一个序列在全排列的下一个序列。(6)fill(x,y,a)可以把数组或容器中的array[x]~array[y-1]区间赋值为a。和memset不同,这里的赋值可以是数组类型对应范围中的任意值。(7)lower_bound(first,last,val)和upper_bound(first,last,val)分别用来寻找在数组或容器[first,last)范围内第一个值大于等于val和第一个值大于val的元素的位置,如果是数组,则返回该位置的指针;如果是容器,则返回该位置的迭代器。如果数组或者容器中没有需要寻找的元素,则两个函数均返回可以插入该元素的位置的指针或者迭代器,它们的时间复杂度均为O(log(last-first))。</code></pre><p>2、sort()函数</p><pre><code>(1)使用方式:sort(首元素地址(必填),尾元素地址的下一个地址(必填),比较函数(非必填));如果不填比较函数,则默认对前面给出的区间[first,last)进行递增排序。(2)比较函数cmpa、基本数据类型数组的排序bool cmp(int a,int b){//int型数据递减排序    return a&gt;b;//当a&gt;b是把a放在b前面}bool cmp(double a,double b){//double型数据递减排序    return a&gt;b;}bool cmp(char a,char b){//char型数据递减排序    return a&gt;b;}其实这里也可不必如此:sort(a,a+10,greater&lt;typename&gt;());也可以实现以上三个比较函数的功能。 b、结构体数组的排序struct node{    int x,y;}st[10];bool cmp(node a,node b){//递减排序    return a.x&gt;b.x;}bool cmp(node a,node b){//先按x从大到小排序,但当x相等时,按照y从小到大来排序    if(a.x!=b.x) return a.x&gt;b.x;    else return a.y&lt;b.y;}sort(st,st+3,cmp);//对下标为0,1,2的结构体类型排序c、容器的排序在STL标准容器中,只有vector、string、deque是可以使用sort的。这是因为set、map这种容器是用红黑树实现的,元素本身有序,故不允许使用sort排序。以vector为例:bool cmp(int a,int b){    return a&gt;b;}vector&lt;int&gt; v;v.push_back(3);v.push_back(1);v.push_back(2);sort(v.begin(),v.end(),cmp);//对整个vector排序</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;sort()函数使用的排序方法是类似于快排的方法，时间复杂度为n*log2(n)。要使用algorithm头文件下的sort()函数,需要加上#include&lt;algorithm&gt;头文件和”using namespace std;”&lt;/algorithm&gt;&lt;/p&gt;
&lt;p&gt;1
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C++" scheme="http://www.echodemo.cc/tags/C/"/>
    
      <category term="STL" scheme="http://www.echodemo.cc/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>C++中的stack</title>
    <link href="http://www.echodemo.cc/2018/03/18/C++%E4%B8%AD%E7%9A%84stack/"/>
    <id>http://www.echodemo.cc/2018/03/18/C++中的stack/</id>
    <published>2018-03-18T12:17:19.000Z</published>
    <updated>2018-03-18T12:21:34.427Z</updated>
    
    <content type="html"><![CDATA[<p>在编程过程中，常常使用stack用来模拟实现一些递归，防止程序对栈内存的限制而导致程序运行出错。一般来说，程序的栈内存空间很小，对有些题目来说，如果用普通的函数来递归，一旦递归层数过深，则会导致程序运行崩溃。如果用栈来模拟递归算法的实现，则可以避免这一方面的问题。stack是一种先进后出的数据结构。要使用stack，必须包含头文件#include<stack>还有命名空间”using namespace std;”。</stack></p><p>1、stack的定义:stack&lt;typename> name;例如:</p><pre><code>stack&lt;int&gt; name;</code></pre><p>2、stack容器内元素的访问</p><pre><code>#include&lt;stdio.h&gt;#include&lt;iostream&gt;#include&lt;stack&gt;using namespace std;int main(){    stack&lt;int&gt; st;    for(int i=1;i&lt;=5;i++){        st.push(i);//push(i)将i压入队列    }    cout&lt;&lt;st.top();//取栈顶元素    return 0;}</code></pre><p>3、stack常用的函数</p><pre><code>(1)push(x):将x进行入栈，时间复杂度为O(1)。(2)pop():栈顶元素出栈，时间复杂度为O(1)。(3)top():获得栈顶元素，时间复杂度为O(1)。(5)empty():检测stack是否为空，时间复杂度为O(1)。(6)size():返回stack内的元素个数，时间复杂度为O(1)。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在编程过程中，常常使用stack用来模拟实现一些递归，防止程序对栈内存的限制而导致程序运行出错。一般来说，程序的栈内存空间很小，对有些题目来说，如果用普通的函数来递归，一旦递归层数过深，则会导致程序运行崩溃。如果用栈来模拟递归算法的实现，则可以避免这一方面的问题。stack
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C++" scheme="http://www.echodemo.cc/tags/C/"/>
    
      <category term="STL" scheme="http://www.echodemo.cc/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>C++中的queue</title>
    <link href="http://www.echodemo.cc/2018/03/18/C++%E4%B8%AD%E7%9A%84queue/"/>
    <id>http://www.echodemo.cc/2018/03/18/C++中的queue/</id>
    <published>2018-03-18T10:44:01.000Z</published>
    <updated>2018-03-18T12:21:43.042Z</updated>
    
    <content type="html"><![CDATA[<p>在编程过程中，当需要实现广度优先搜索时，可以不用自己手动实现一个队列，而是用queue作为代替，以提高程序的准确性。要使用queue，必须包含头文件#include<queue>还有命名空间”using namespace std;”。STL的容器中还有两种容器和队列有关，分别是双端队列(deque)和优先队列(priority_queue)，前者是首位皆可以插入和删除的队列，后者是使用堆实现的默认将当前队列最大元素置于队首的容器。</queue></p><p>1、queue的定义:queue&lt;typename> name;例如:</p><pre><code>queue&lt;int&gt; name;//typename可以是任意基本数据类型或容器</code></pre><p>2、queue容器内元素的访问</p><pre><code>由于队列queue是一种先进先出的限制性数据结构,因此在STL中只能通过front()来访问队首元素,或者通过back()来访问队尾元素。#include&lt;stdio.h&gt;#include&lt;iostream&gt;#include&lt;queue&gt;using namespace std;int main(){    queue&lt;int&gt; q;    for(int i=1;i&lt;=5;i++){        q.push(i);//push(i)将i压入队列    }    cout&lt;&lt;q.front()&lt;&lt;&quot; &quot;&lt;&lt;q.back();    return 0;}</code></pre><p>3、queue常用的函数</p><pre><code>(1)push(x):将x进行入队，时间复杂度为O(1)。(2)pop():令队首元素出队，时间复杂度为O(1)。使用pop()函数之前必须用empty()判断队列是否为空。(3)front():获得队首元素，时间复杂度为O(1)。使用front()函数之前必须用empty()判断队列是否为空。(4)back():获得队尾元素，时间复杂度为O(1)。(5)empty():检测queue是否为空，时间复杂度为O(1)。(6)size():返回queue内的元素个数，时间复杂度为O(1)。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在编程过程中，当需要实现广度优先搜索时，可以不用自己手动实现一个队列，而是用queue作为代替，以提高程序的准确性。要使用queue，必须包含头文件#include&lt;queue&gt;还有命名空间”using namespace std;”。STL的容器中还有两种容器和队列有关，
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C++" scheme="http://www.echodemo.cc/tags/C/"/>
    
      <category term="STL" scheme="http://www.echodemo.cc/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>C++中的map</title>
    <link href="http://www.echodemo.cc/2018/03/18/C++%E4%B8%AD%E7%9A%84map/"/>
    <id>http://www.echodemo.cc/2018/03/18/C++中的map/</id>
    <published>2018-03-18T10:27:33.000Z</published>
    <updated>2018-03-18T12:22:15.766Z</updated>
    
    <content type="html"><![CDATA[<p>在编程过程中，如果需要建立字符(或者字符串)与整数之间的映射;判断大整数或者其他类型数据是否存在;甚至是字符串和字符串之间的映射。此时我们应当想到map，因为map可以将任何基本类型(包括STL容器)映射到任何基本类型(包括STL容器)。map和其他的STL容器有点不一样，因为map需要确定映射前类型(键key)和映射后类型(值value),所以需要在&lt;&gt;内填写两个类型。需要注意的是:map中的键是唯一的，而且map会以键从小到大的顺序自动排序(这是由于map内部是使用红黑树实现的，set也是，在建立映射的过程中会自动实现从小到大的排序功能)。如果需要使用map，必须包含头文件#include<map>还有命名空间”using namespace std;”。</map></p><p>1、map的定义:map&lt;typename1,typename2> name;例如:</p><pre><code>map&lt;string,int&gt; name;//如果是字符串到整型的映射，必须使用string而不能用char数组map&lt;set&lt;int&gt;,string&gt; name;//将一个set容器映射到一个字符串</code></pre><p>2、map容器内元素的访问</p><pre><code>(1)通过下标访问，例如：一个定义为map&lt;char,int&gt; name的map来说，可以直接使用name[&apos;c&apos;]来访问对应的整数。(2)通过迭代器访问,其定义是:map&lt;typename1,typename2&gt;::iterator it;但map迭代器的使用方式和其他STL容器的迭代器不同,因为map的每一对映射都有两个typename,此时我们可以使用it-&gt;first来访问键，使用it-&gt;second来访问值。#include&lt;stdio.h&gt;#include&lt;iostream&gt;#include&lt;map&gt;using namespace std;int main(){    map&lt;char,int&gt; mp;    mp[&apos;m&apos;]=20;    mp[&apos;r&apos;]=30;    mp[&apos;a&apos;]=40;    for(map&lt;char,int&gt;::iterator it=mp.begin();it!=mp.end();it++){        cout&lt;&lt;it-&gt;first&lt;&lt;&quot; &quot;&lt;&lt;it-&gt;second;    }    return 0;}上述程序中出现了去a的首地址的begin()函数,那么就不得不提到end()函数。与begin()函数不同的是,end()函数作为迭代器的末尾标志,取的是尾元素地址的下一个地址,不存储任何元素。另外,map的迭代器不支持it&lt;a.end()的写法,因此循环条件只能用it!=a.end()。除此之外,迭代器还实现了两种自加操作:it++和++it(自减操作同理)。</code></pre><p>3、map常用的函数</p><pre><code>(1)find(key):用以返回键为key的映射的迭代器，时间复杂度为O(logN)。map&lt;char,int&gt;::iterator it=mp.find(&apos;b&apos;)(2)size():用来获得map中映射的对数，时间复杂度为O(1)。(3)clear():用来清空map中的所有元素，时间复杂度为O(N)。(4)erase():有两种用法:删除单个元素,删除一个区间内的所有元素。删除单个元素有两种用法:mp.erase(it),it位所需要删除元素的迭代器,时间复杂度O(1);mp.erase(key),key为欲删除的映射的键,时间复杂度为O(logN)。删除一个区间内的所有元素:mp.erase(first,last),first为起始迭代器,而last为删除区间的末尾迭代器的下一个地址。时间复杂度为O(last-first)。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在编程过程中，如果需要建立字符(或者字符串)与整数之间的映射;判断大整数或者其他类型数据是否存在;甚至是字符串和字符串之间的映射。此时我们应当想到map，因为map可以将任何基本类型(包括STL容器)映射到任何基本类型(包括STL容器)。map和其他的STL容器有点不一样，
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C++" scheme="http://www.echodemo.cc/tags/C/"/>
    
      <category term="STL" scheme="http://www.echodemo.cc/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>C++中的set</title>
    <link href="http://www.echodemo.cc/2018/03/17/C++%E4%B8%AD%E7%9A%84set/"/>
    <id>http://www.echodemo.cc/2018/03/17/C++中的set/</id>
    <published>2018-03-17T08:09:21.000Z</published>
    <updated>2018-03-18T14:08:04.611Z</updated>
    
    <content type="html"><![CDATA[<p>在编程过程中，有时经常出现去掉重复元素的情况，而且有可能因为这些元素比较大或者类型不是int型而不能直接开散列表。此时我们应当想到set，set是关联式容器。其作为一个容器是用来存储同一类型数据的数据类型，比如：int、char、double、结构体等。在set中每个元素的值都唯一，而且系统能根据元素的值自动进行递增排序,这是因为其内部是用红黑树实现的。如果需要使用set，必须包含头文件#include<set>还有命名空间”using namespace std;”。</set></p><p>1、set的定义:set&lt;typename> name;例如:</p><pre><code>set&lt;int&gt; name;      //声明一个int容器set&lt;int&gt; name(10);  //声明一个初始大小为10的int型容器set&lt;int&gt; name(10,1);//声明一个初始大小为10且初始值都为1的int型容器set&lt;int&gt; name(a);   //声明一个初始大小为a的int型容器set&lt;node&gt; name;     //node是结构体的类型如果typename是set，定义的时候记得在&gt;&gt;符号之间加上空格:set&lt;set&lt;int&gt; &gt; name;//&gt;&gt;之间要有空格</code></pre><p>2、set数组的定义:set&lt;typename> arrayname[arraysize];例如:</p><pre><code>set&lt;int&gt; a[100];//a[0]~a[99]中的每一个都是一个set容器与set&lt;set&lt;int&gt; &gt; name;不同的是，这种写法的一维长度已经固定为arraysize，另一维才是变长的。</code></pre><p>3、set容器内元素的访问</p><pre><code>set只能通过迭代器访问,迭代器可以理解为一种类似指针的东西，其定义是:set&lt;typename&gt;::iterator it;这样得到迭代器it之后，就可以通过*it来访问set中的元素例如:#include&lt;iostream&gt;#include&lt;set&gt;using namespace std ;int main(){    set&lt;int&gt; a;    a.insert(3);//将3插入set中    a.insert(5);    a.insert(2);    a.insert(3);    for(set&lt;int&gt;::iterator it=a.begin();it!=a.end();it++){//a.begin()为取a的首元素地址，而it指向这个地址        cout&lt;&lt;*it;    }    return 0;}上述程序中出现了去a的首地址的begin()函数,那么就不得不提到end()函数。与begin()函数不同的是,end()函数作为迭代器的末尾标志,取的是尾元素地址的下一个地址,不存储任何元素。另外,set的迭代器不支持it&lt;a.end()的写法,因此循环条件只能用it!=a.end()。除此之外,迭代器还实现了两种自加操作:it++和++it(自减操作同理)。另外,除vector和string之外的STL容器都不支持*(it+i)的访问方式。因此只能按如上的方式枚举。</code></pre><p>4、set常用的函数</p><pre><code>(1)insert(x):在set容器中添加一个元素,并自动递增排序,时间复杂度为O(logN),N为set内元素个数。(2)find(x):用以返回set中对应值为x的迭代器，时间复杂度为O(logN)。set&lt;int&gt;::iterator it=a.find(2)(3)size():用来获得set中的元素的个数，时间复杂度为O(1)。(4)clear():用来清空set中的所有元素，时间复杂度为O(N)。(6)erase():有两种用法:删除单个元素,删除一个区间内的所有元素。删除单个元素有两种用法:a.erase(it),it为所需要删除元素的迭代器,时间复杂度O(1);a.erase(x),x为所要删除元素的值,时间复杂度为O(logN)。删除一个区间内的所有元素:a.erase(first,last),first为起始迭代器,而last为删除区间的末尾迭代器的下一个地址。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在编程过程中，有时经常出现去掉重复元素的情况，而且有可能因为这些元素比较大或者类型不是int型而不能直接开散列表。此时我们应当想到set，set是关联式容器。其作为一个容器是用来存储同一类型数据的数据类型，比如：int、char、double、结构体等。在set中每个元素的
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C++" scheme="http://www.echodemo.cc/tags/C/"/>
    
      <category term="STL" scheme="http://www.echodemo.cc/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>C++中的vector</title>
    <link href="http://www.echodemo.cc/2018/03/16/C++%E4%B8%AD%E7%9A%84vector/"/>
    <id>http://www.echodemo.cc/2018/03/16/C++中的vector/</id>
    <published>2018-03-16T11:41:49.000Z</published>
    <updated>2018-03-18T08:48:21.798Z</updated>
    
    <content type="html"><![CDATA[<p>在编程过程中，有时经常出现普通数组浪费大量的内存空间或者无法使用邻接矩阵(节点数太多)又害怕使用指针实现邻接表的情况。此时我们应当想到vector。向量vector是一种对象实体, 能够容纳许多其他类型相同的元素,比如：int、char、double、结构体等。 因此又被称为容器。与string相同,vector同属于STL(Standard Template Library,标准模板库)中的一种自定义的数据类型, 可以广义上认为是数组的增强版。vector是一个能够存放任意类型的动态数组。如果需要使用vector，必须包含头文件#include<vector>还有命名空间”using namespace std;”。</vector></p><p>1、vector的定义:vector&lt;typename> name;例如:</p><pre><code>vector&lt;int&gt; name;      //声明一个int向量vector&lt;int&gt; name(10);  //声明一个初始大小为10的int型向量vector&lt;int&gt; name(10,1);//声明一个初始大小为10且初始值都为1的int型向量vector&lt;int&gt; name(a);   //声明一个初始大小为a的int型向量vector&lt;node&gt; name;     //node是结构体的类型如果typename是vector，定义的时候记得在&gt;&gt;符号之间加上空格:vector&lt;vector&lt;int&gt; &gt; name;//&gt;&gt;之间要有空格</code></pre><p>2、vector数组的定义:vector&lt;typename> arrayname[arraysize];例如:</p><pre><code>vector&lt;int&gt; vi[100];//vi[0]~vi[99]中的每一个都是一个vector容器与vector&lt;vector&lt;int&gt; &gt; name;不同的是，这种写法的一维长度已经固定为arraysize，另一维才是变长的。</code></pre><p>3、vector容器内元素的访问</p><pre><code>(1)通过下标访问，即vi[0]~vi[size-1]进行访问。(2)通过迭代器访问,迭代器可以理解为一种类似指针的东西，其定义是:vector&lt;typename&gt;::iterator it;这样得到迭代器it之后，就可以通过*it来访问vector中的元素例如:#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std ;int main(){    vector&lt;int&gt; vi;    for(int i=1;i&lt;=5;i++){        vi.push_back(i);    }    vector&lt;int&gt;::iterator it=vi.begin();//vi.begin()为取vi的首元素地址，而it指向这个地址    for(int i=0;i&lt;5;i++){        cout&lt;&lt;*(it+i);    }    return 0;}上述程序中出现了去vi的首地址的begin()函数,那么就不得不提到end()函数。与begin()函数不同的是,end()函数作为迭代器的末尾标志,取的是尾元素地址的下一个地址,不存储任何元素。另外，vector的迭代器不支持it&lt;vi.end()的写法，因此循环条件只能用it!=vi.end()。除此之外，迭代器还实现了两种自加操作:it++和++it(自减操作同理)。</code></pre><p>4、vector常用的函数</p><pre><code>(1)push_back(x):在vector后面添加一个元素，时间复杂度为O(1)。(2)pop_back():用以删除vector的尾元素，时间复杂度为O(1)。(3)size():用来获得vector中的元素的个数，时间复杂度为O(1)。返回的是unsigned类型。(4)clear():用来清空vector中的所有元素，时间复杂度为O(N)。N为vector中元素的个数。(5)insert(it,x):用来向vector的任意迭代器it处插入一个元素x，时间复杂度O(N)。(6)erase():有两种用法:删除单个元素,删除一个区间内的所有元素。a.erase(it),it为所需要删除元素的迭代器,时间复杂度O(N);a.erase(first,last),first为起始迭代器,而last为删除区间的末尾迭代器的下一个地址。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在编程过程中，有时经常出现普通数组浪费大量的内存空间或者无法使用邻接矩阵(节点数太多)又害怕使用指针实现邻接表的情况。此时我们应当想到vector。向量vector是一种对象实体, 能够容纳许多其他类型相同的元素,比如：int、char、double、结构体等。 因此又被称
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C++" scheme="http://www.echodemo.cc/tags/C/"/>
    
      <category term="STL" scheme="http://www.echodemo.cc/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>hexo的next主题使用过程中所遇见的问题及解决措施</title>
    <link href="http://www.echodemo.cc/2018/03/16/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E6%89%80%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%8E%AA%E6%96%BD/"/>
    <id>http://www.echodemo.cc/2018/03/16/hexo的next主题使用过程中所遇见的问题及解决措施/</id>
    <published>2018-03-16T05:29:30.000Z</published>
    <updated>2018-03-16T05:33:39.488Z</updated>
    
    <content type="html"><![CDATA[<p>1、有时在hexo s之后本地没有问题，但是在hexo d推送到GitHub之后没有样式显示，此时很可能是GitHub网站本身的原因，稍微等等再刷新就没事了。实在不行的话就把刚才的修改内容改回之前的状态。先hexo clean清理缓存，再hexo g;hexo d刷新查看。</p><p>2、平时对博客的修改和更新直接使用hexo g;hexo s查看本地无误之后一般直接hexo d就行了。但是在其中某一步执行完报错之后，记得要先hexo clean再重新执行其他的操作。</p><p>3、博客在本地显示正常，hexo d到github上后只显示框架，内容空白时。进入next主题的source目录，将vendors文件的文件名改成任意其他名字，如：VEN。接着在next主题的配置文件_config.yml中,将vendors: 块中的_internal: vendors项改成前面重命名文件夹的名称,如_internal: VEN，保存。(注意在hexo中的大多数情况之下冒号和要填写数据之间必须有一个空格符，否则会在hexo g时便报错)。接下来hexo clean;hexo g;hexo d;打开博客主页，清理缓存，多刷新几次即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、有时在hexo s之后本地没有问题，但是在hexo d推送到GitHub之后没有样式显示，此时很可能是GitHub网站本身的原因，稍微等等再刷新就没事了。实在不行的话就把刚才的修改内容改回之前的状态。先hexo clean清理缓存，再hexo g;hexo d刷新查看。
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://www.echodemo.cc/tags/hexo/"/>
    
      <category term="next" scheme="http://www.echodemo.cc/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>大整数与int型数据的除法</title>
    <link href="http://www.echodemo.cc/2018/03/15/%E5%A4%A7%E6%95%B4%E6%95%B0%E4%B8%8Eint%E5%9E%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E9%99%A4%E6%B3%95/"/>
    <id>http://www.echodemo.cc/2018/03/15/大整数与int型数据的除法/</id>
    <published>2018-03-15T07:37:23.000Z</published>
    <updated>2018-03-15T07:48:13.515Z</updated>
    
    <content type="html"><![CDATA[<p>大整数与int型数据的除法也可以叫做高精度与低精度的除法，所谓的高精度就是基本数据类型无法存储的数据，比如1000个数位的整数；而所谓的低精度就是可以用基本数据类型存储的数据，比如int类型。那么该如何进行相除呢？其实本质上和小学的乘法是一样的。我们将无法储存的大整数放进int型的数组，大整数的高位存储在数组的高位，低位存储在数组的低位。从大整数的高位开始，上一步的余数(余数的初始值为0)乘以10加上该步的位，得到该步临时的被除数，将其与除数比较：如果不够除，则该位的商为0；如果够除，则商即为对应的商，余数即为对应的余数。最后一步需要注意高位可能有多余的0，要去除，但同时也要保证至少有一位数。有一点需要注意的是：这里的除法函数当中使用了引用变量，引用不产生副本，而是给原变量取了一个别名，对引用变量的操作就是对原变量(即算法中的全局变量)的操作。这里的算法没有考虑大整数和整数为负的情况。具体的算法如下：</p><pre><code>#include &quot;stdafx.h&quot;#include&lt;iostream&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;using namespace std;struct bign {    int d[1000];//使用int型数组存放大整数的每一位。    int len;//记录大整数的长度。    bign() {//&quot;构造函数&quot;用于初始化结构体。        memset(d, 0, sizeof(d));        len=0;    }};bign change(char str[]) {//将存储在字符数组中的大整数转换为bign    bign a;    a.len = strlen(str);    for (int i = 0;i &lt; a.len;i++) {//大整数的高位存储在数组的高位，低位存储在数组的低位。        a.d[i] = str[a.len - i - 1] - &apos;0&apos;;    }    return a;}bign divide(bign a, int b,int &amp;r) {//a/b    bign c;    c.len = a.len;//被除数的每一位和商的每一位是一一对应的。    for (int i = c.len - 1;i &gt;= 0;i--) {//从高位开始除。        r = r * 10 + a.d[i];//和上一位的余数进行组合。这里的r是引用变量，对引用变量的操作就是对原全局变量的操作。        if (r &lt; b) c.d[i] = 0;//不够除，该位的商为0。        else {            c.d[i] = r / b;//商            r = r % b;//获得新的余数。        }    }    while((c.len-1&gt;=1)&amp;&amp;c.d[c.len-1]==0){        c.len--;//去除高位的0，同时至少保留一位最低位。    }    return c;}void print(bign a) {//输出bign。    for (int i = a.len - 1;i &gt;= 0;i--) {        cout &lt;&lt; a.d[i];    }}int main() {    char str1[1000];    int b,r=0;    cin &gt;&gt; str1 &gt;&gt; b;    bign a = change(str1);    print(divide(a, b,r));//商    cout &lt;&lt;&quot; &quot;&lt;&lt; r;//余数    system(&quot;pause&quot;);    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大整数与int型数据的除法也可以叫做高精度与低精度的除法，所谓的高精度就是基本数据类型无法存储的数据，比如1000个数位的整数；而所谓的低精度就是可以用基本数据类型存储的数据，比如int类型。那么该如何进行相除呢？其实本质上和小学的乘法是一样的。我们将无法储存的大整数放进i
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C++" scheme="http://www.echodemo.cc/tags/C/"/>
    
      <category term="算法" scheme="http://www.echodemo.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>大整数与int型数据的乘法</title>
    <link href="http://www.echodemo.cc/2018/03/14/%E5%A4%A7%E6%95%B4%E6%95%B0%E4%B8%8Eint%E5%9E%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B9%98%E6%B3%95/"/>
    <id>http://www.echodemo.cc/2018/03/14/大整数与int型数据的乘法/</id>
    <published>2018-03-14T14:56:12.000Z</published>
    <updated>2018-03-14T15:07:32.847Z</updated>
    
    <content type="html"><![CDATA[<p>大整数与int型数据的乘法也可以叫做高精度与低精度的乘法，所谓的高精度就是基本数据类型无法存储的数据，比如1000个数位的整数；而所谓的低精度就是可以用基本数据类型存储的数据，比如int类型。那么该如何进行相乘呢？其实本质上和小学的乘法是一样的。我们将无法储存的大整数放进int型的数组，大整数的高位存储在数组的高位，低位存储在数组的低位。从int型数组的低位开始取数与int型数据相乘，再与进位相加，所得的结果的个位数作为该位的结果，高部位作为新的进位。这里的算法没有考虑大整数和整数为负的情况。具体的算法如下：</p><pre><code>#include &quot;stdafx.h&quot;#include&lt;iostream&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;using namespace std;struct bign {    int d[1000];//使用int型数组存放大整数的每一位。    int len;//记录大整数的长度。    bign() {//&quot;构造函数&quot;用于初始化结构体。        memset(d, 0, sizeof(d));        len=0;    }};bign change(char str[]) {//将存储在字符数组中的大整数转换为bign    bign a;    a.len = strlen(str);    for (int i = 0;i &lt; a.len;i++) {//大整数的高位存储在数组的高位，低位存储在数组的低位。        a.d[i] = str[a.len - i - 1] - &apos;0&apos;;    }    return a;}bign multi(bign a, int b) {//a*b    bign c;    int carry = 0;//进位    for (int i = 0;i &lt; a.len;i++) {        int temp = a.d[i] * b + carry;        c.d[c.len++] = temp % 10;//个位作为该位的结果。        carry = temp / 10;//高位部分作为新的进位。    }    while (carry != 0) {//此处和加法略有不同，乘法的进位可能不止一位。        c.d[c.len++] = carry % 10;        carry /= 10;    }    return c;}void print(bign a) {//输出bign。    for (int i = a.len - 1;i &gt;= 0;i--) {        cout &lt;&lt; a.d[i];    }}int main() {    char str1[1000];    int b;    cin &gt;&gt; str1 &gt;&gt; b;    bign a = change(str1);    print(multi(a, b));    system(&quot;pause&quot;);    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大整数与int型数据的乘法也可以叫做高精度与低精度的乘法，所谓的高精度就是基本数据类型无法存储的数据，比如1000个数位的整数；而所谓的低精度就是可以用基本数据类型存储的数据，比如int类型。那么该如何进行相乘呢？其实本质上和小学的乘法是一样的。我们将无法储存的大整数放进i
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C++" scheme="http://www.echodemo.cc/tags/C/"/>
    
      <category term="算法" scheme="http://www.echodemo.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>大整数减法</title>
    <link href="http://www.echodemo.cc/2018/03/14/%E5%A4%A7%E6%95%B4%E6%95%B0%E5%87%8F%E6%B3%95/"/>
    <id>http://www.echodemo.cc/2018/03/14/大整数减法/</id>
    <published>2018-03-14T11:53:41.000Z</published>
    <updated>2018-03-14T15:17:12.648Z</updated>
    
    <content type="html"><![CDATA[<p>大整数减法又称之为高精度减法，大整数其含义就是基本数据类型无法存储的整数。比如A和B是有着1000个数位的整数。那么该如何进行相减呢？其实本质上和小学的减法是一样的。我们将无法储存的大整数放进int型的数组，大整数的高位存储在数组的高位，低位存储在数组的低位。在相减之前去比较两者的大小，如果是小的减大的则先把负号输出来，将两者进行交换之后再按大的减小的的步骤来。在减的过程中如果当前位是小减大，那么当前位先加10再减，被减数的当前位的下一位同时需要减1。在所有的位都彼此相减完之后，此时还需要考虑高位为0的情况：例如两数是相等的情况，那么就需要消去高位的0。完成之后再将其反向输出就行了。具体的算法如下：</p><pre><code>#include &quot;stdafx.h&quot;#include&lt;iostream&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;using namespace std;struct bign {    int d[1000];//使用int型数组存放大整数的每一位。    int len;//记录大整数的长度。    bign() {//&quot;构造函数&quot;用于初始化结构体。        memset(d, 0, sizeof(d));        len=0;    }};bign change(char str[]) {//将存储在字符数组中的大整数转换为bign    bign a;    a.len = strlen(str);    for (int i = 0;i &lt; a.len;i++) {//大整数的高位存储在数组的高位，低位存储在数组的低位。        a.d[i] = str[a.len - i - 1] - &apos;0&apos;;    }    return a;}bign sub(bign a, bign b) {//a-b。    bign c;    for (int i = 0;i &lt; a.len || i &lt; b.len;i++) {        if (a.d[i] &lt; b.d[i]) {            a.d[i + 1]--;//向高位借位。            a.d[i] += 10;//当前位加10。        }        c.d[c.len++] = a.d[i] - b.d[i];//当前位相减。    }    while ((c.len - 1 &gt;= 1) &amp;&amp; c.d[c.len - 1] == 0) {        c.len--;//去除高位的0，同时如果两数相等保留一个0。    }    return c;}int compare(bign a, bign b) {//比较两数的大小，先比较长度，再比较各个位的数值大小。    if (a.len &gt; b.len) return 1;//a大    else if (b.len &gt; a.len) return -1;//b大    else {        for (int i = a.len - 1;i &gt;= 0;i--) {            if (a.d[i] &gt; b.d[i]) return 1;            else if (a.d[i] &lt; b.d[i]) return -1;        }        return 0;    }}void print(bign a) {//输出bign。    for (int i = a.len - 1;i &gt;= 0;i--) {        cout &lt;&lt; a.d[i];    }}int main() {    char str1[1000], str2[1000];    cin &gt;&gt; str1 &gt;&gt; str2;    bign a = change(str1);    bign b = change(str2);    if (compare(a, b) &lt; 0) {//如果a小于b，就交换。        cout &lt;&lt; &quot;-&quot;;        bign c = a;        a = b;        b = c;    }    print(sub(a, b));    system(&quot;pause&quot;);    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大整数减法又称之为高精度减法，大整数其含义就是基本数据类型无法存储的整数。比如A和B是有着1000个数位的整数。那么该如何进行相减呢？其实本质上和小学的减法是一样的。我们将无法储存的大整数放进int型的数组，大整数的高位存储在数组的高位，低位存储在数组的低位。在相减之前去比
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C++" scheme="http://www.echodemo.cc/tags/C/"/>
    
      <category term="算法" scheme="http://www.echodemo.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>大整数加法</title>
    <link href="http://www.echodemo.cc/2018/03/14/%E5%A4%A7%E6%95%B4%E6%95%B0%E5%8A%A0%E6%B3%95/"/>
    <id>http://www.echodemo.cc/2018/03/14/大整数加法/</id>
    <published>2018-03-14T08:51:34.000Z</published>
    <updated>2018-03-14T12:27:43.483Z</updated>
    
    <content type="html"><![CDATA[<p>大整数加法又称之为高精度加法，大整数其含义就是基本数据类型无法存储的整数。比如A和B是有着1000个数位的整数。那么该如何进行相加呢？其实本质上和小学的加法是一样的。我们将无法储存的大整数放进int型的数组，大整数的高位存储在数组的高位，低位存储在数组的低位。在相加完成之后再将其反向输出就行了。具体的算法如下：</p><pre><code>#include &quot;stdafx.h&quot;#include&lt;iostream&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;using namespace std;struct bign {    int d[1000];//使用int型数组存放大整数的每一位。    int len;//记录大整数的长度。    bign() {//&quot;构造函数&quot;用于初始化结构体。        memset(d, 0, sizeof(d));        len=0;    }};bign change(char str[]) {//将存储在字符数组中的大整数转换为bign    bign a;    a.len = strlen(str);    for (int i = 0;i &lt; a.len;i++) {//大整数的高位存储在数组的高位，低位存储在数组的低位。        a.d[i] = str[a.len - i - 1] - &apos;0&apos;;    }    return a;}bign add(bign a, bign b) {//a+b。    bign c;    int carry = 0;//存储进位。    for (int i = 0;i &lt; a.len || i &lt; b.len;i++) {        int temp = a.d[i] + b.d[i] + carry;        c.d[c.len++] = temp % 10;//两数之和的个位。        carry = temp / 10;//两数之和的十位。    }    if (carry != 0)        c.d[c.len++] = carry;//两个大整数的最高位相加之后有进位。    return c;}void print(bign a) {//输出bign。    for (int i = a.len - 1;i &gt;= 0;i--) {        cout &lt;&lt; a.d[i];    }}int main() {    char str1[1000], str2[1000];    cin &gt;&gt; str1 &gt;&gt; str2;    bign a = change(str1);    bign b = change(str2);    print(add(a, b));    system(&quot;pause&quot;);    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大整数加法又称之为高精度加法，大整数其含义就是基本数据类型无法存储的整数。比如A和B是有着1000个数位的整数。那么该如何进行相加呢？其实本质上和小学的加法是一样的。我们将无法储存的大整数放进int型的数组，大整数的高位存储在数组的高位，低位存储在数组的低位。在相加完成之后
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C++" scheme="http://www.echodemo.cc/tags/C/"/>
    
      <category term="算法" scheme="http://www.echodemo.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java中的String</title>
    <link href="http://www.echodemo.cc/2018/03/14/Java%E4%B8%AD%E7%9A%84String/"/>
    <id>http://www.echodemo.cc/2018/03/14/Java中的String/</id>
    <published>2018-03-14T06:56:23.000Z</published>
    <updated>2018-03-14T07:14:48.690Z</updated>
    
    <content type="html"><![CDATA[<p>1、在Java中字符串是一个对象，同样的，String变量存储的是对String对象的引用。且Sting对象的内容是不可变的，但保存String引用的变量是可变的，即String变量存储其他的String对象的引用。</p><p>2、Java虚拟机为了提高效率并节约内存，对具有相同字符串序列的字符串直接量(请注意这里不是指具有相同字符串序列的String对象)使用同一个实例。</p><p>3、字符串的比较：运算符==只能检测两个String是否指向同一个对象，但不会告诉你他们的内容是否相等。而equals方法则可以用来判断两个字符串变量的内容是否相等。compareTo方法用来比较两个字符串时的返回值是，两个字符串从左到右第一个不同字符之间的差值。</p><p>4、StringBuffer类和StringBuilder类都比String类更灵活且这两个类是很相似的，它们创建的对象的值都可以被修改。不过在多任务并发访问的情况下就使用StringBuffer；而如果是单任务访问，就使用StringBuilder更有效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、在Java中字符串是一个对象，同样的，String变量存储的是对String对象的引用。且Sting对象的内容是不可变的，但保存String引用的变量是可变的，即String变量存储其他的String对象的引用。&lt;/p&gt;
&lt;p&gt;2、Java虚拟机为了提高效率并节约内存，
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.echodemo.cc/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>早</title>
    <link href="http://www.echodemo.cc/2018/03/14/%E6%97%A9/"/>
    <id>http://www.echodemo.cc/2018/03/14/早/</id>
    <published>2018-03-14T06:19:32.000Z</published>
    <updated>2018-03-14T06:21:44.316Z</updated>
    
    <content type="html"><![CDATA[<p>昨夜雨疏风骤，晨起的道上落满了香樟树的叶子，叶子大多橙黄，意味着新生。空气湿润，给人以深呼吸的欲望。上课的人群络绎不绝；环游车从耳旁呼啸而过；还有鸟儿藏在春日的绿里，送来阵阵悦耳的啼鸣。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨夜雨疏风骤，晨起的道上落满了香樟树的叶子，叶子大多橙黄，意味着新生。空气湿润，给人以深呼吸的欲望。上课的人群络绎不绝；环游车从耳旁呼啸而过；还有鸟儿藏在春日的绿里，送来阵阵悦耳的啼鸣。&lt;/p&gt;

      
    
    </summary>
    
      <category term="生活" scheme="http://www.echodemo.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="日志" scheme="http://www.echodemo.cc/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>为hexo的next主题添加点击出现桃心效果的功能</title>
    <link href="http://www.echodemo.cc/2018/03/11/%E4%B8%BAhexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E5%87%BA%E7%8E%B0%E6%A1%83%E5%BF%83%E6%95%88%E6%9E%9C%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
    <id>http://www.echodemo.cc/2018/03/11/为hexo的next主题添加点击出现桃心效果的功能/</id>
    <published>2018-03-11T10:54:30.000Z</published>
    <updated>2018-03-11T11:21:00.263Z</updated>
    
    <content type="html"><![CDATA[<p>1、在路径/themes/next/source/js/src里面新建love.js文件。</p><p>2、将下列代码copy进去:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure><p>3、然后打开\themes\next\layout_layout.swig文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：</p><pre><code>&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</code></pre><p>4、接下来你懂的:</p><pre><code>hexo ghexo shexo d</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、在路径/themes/next/source/js/src里面新建love.js文件。&lt;/p&gt;
&lt;p&gt;2、将下列代码copy进去:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://www.echodemo.cc/tags/hexo/"/>
    
      <category term="next" scheme="http://www.echodemo.cc/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>Java中需要注意的Points</title>
    <link href="http://www.echodemo.cc/2018/03/11/Java%E4%B8%AD%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84Points/"/>
    <id>http://www.echodemo.cc/2018/03/11/Java中需要注意的Points/</id>
    <published>2018-03-11T10:43:44.000Z</published>
    <updated>2018-03-13T08:29:53.785Z</updated>
    
    <content type="html"><![CDATA[<p>1、数组的创建不同于基本数据类型变量的声明，声明一个数组变量时并不在内存中给数组分配任何空间。它只是创建一个对数组的引用的存储位置。</p><p>2、在给方法传值的过程中，对于基本数据类型来说，传递的是实参的值，而方法内部的形参获得的值的改变并不会造成方法外部的值的变化；而对于数组类型来说，传递的是数组的引用，也就是说方法中的数组和方法外的数组是一样的，所以如果改变方法中的数组，那么方法外的数组也跟着变化了。</p><p>3、对象是通过对象引用变量来访问的，通常在实例化一个类时包括：声明对象引用变量、创建对象以及将对象的引用赋值给这个变量。其实此处类似于数组的创建，从严格意义上来讲，对象引用变量和对象是不同的，但大多数情况下可以忽略这种不同。另外，类中的数据域(即类中的属性)如果未被初始化，那么会被赋予默认值：引用类型的数据域的默认值是null，数值类型的数据域的默认值是0，boolean是false，char是’\u0000’。但是java没有给方法中的局部变量赋默认值。</p><p>4、java中的静态变量可以被一个类的所有实例共享数据，如果某一个对象修改了静态变量的值，那么同一个类的所有对象都会受到影响。java中的静态变量和静态方法都无须创建类的实例就可以被调用。但是实例方法和实例变量只能在实例方法中使用，不能在静态方法中使用。由此可知，math类中的所有数据域和方法都是静态的。</p><p>5、在类、方法、和数据域前使用public修饰符表示可以在任何其他的类中进行访问；如果没有使用可见性修饰符，那么默认为类、方法和数据域是可以被同一个包中的任何一个类访问；private修饰符限定方法和数据域只能在它自己的类中被访问。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、数组的创建不同于基本数据类型变量的声明，声明一个数组变量时并不在内存中给数组分配任何空间。它只是创建一个对数组的引用的存储位置。&lt;/p&gt;
&lt;p&gt;2、在给方法传值的过程中，对于基本数据类型来说，传递的是实参的值，而方法内部的形参获得的值的改变并不会造成方法外部的值的变化；
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.echodemo.cc/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>为博客添加标签和分类页面</title>
    <link href="http://www.echodemo.cc/2018/03/09/Add-tags-and-categories-to-Blogs/"/>
    <id>http://www.echodemo.cc/2018/03/09/Add-tags-and-categories-to-Blogs/</id>
    <published>2018-03-09T12:50:20.000Z</published>
    <updated>2018-03-10T14:10:15.486Z</updated>
    
    <content type="html"><![CDATA[<p>1、添加标签页面</p><pre><code>定位到 Hexo 站点目录下，使用 hexo new page 新建一个页面，命名为 tags，布局格式为page:$ cd hexo目录$ hexo new page tags内容如下所示，如果要关闭tags页面的评论可以设置comments为false:---title: 标签date: 2014-12-22 12:39:04type: &quot;tags&quot;comments: false---这样以后tags页面在每次执行hexo generate后自动更新。</code></pre><p>2、添加分类页面</p><pre><code>和上面的一样，在hexo目录下执行下面命令：$ hexo new page categories内容为：---title: 分类date: 2014-12-22 12:39:04type: &quot;categories&quot;comments: false---</code></pre><p>3、添加404页面</p><pre><code>新建一个404.html文件，放到themes\next\source目录下，内容你自己定。</code></pre><p>4、添加博文</p><pre><code>$ hexo new [filename]---title: filename!date: create_timetags: tagscategories: categories---或者写好文章后，找到菜单栏的“导出到本地”选项.以md格式导出到本地，然后copy该md文件，粘贴到你当初建的博客站点文件夹下的source\ _posts目录下，一个md文件对应一篇博客文章。</code></pre><p>5、多标签和多分类的表示方法</p><pre><code>tags: [tags1,tags2,tags3]categories: [cat1,cat2,cat3]</code></pre><p>6、对本地作出的修改进行测试和上传</p><pre><code>在你博客站点文件夹下右键空白处，选择Git Bash Here，输入：hexo generate，回车，生成静态页面， 再输入：hexo server，回车，到localhost:4000预览博客效果， 最后输入：hexo deploy，回车，同步到github上去就行了。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、添加标签页面&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;定位到 Hexo 站点目录下，使用 hexo new page 新建一个页面，命名为 tags，布局格式为page:

$ cd hexo目录
$ hexo new page tags
内容如下所示，如果要关闭tags页面的评
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://www.echodemo.cc/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git push to github</title>
    <link href="http://www.echodemo.cc/2018/03/08/Git-push-to-github/"/>
    <id>http://www.echodemo.cc/2018/03/08/Git-push-to-github/</id>
    <published>2018-03-08T08:05:11.000Z</published>
    <updated>2018-03-08T13:17:09.224Z</updated>
    
    <content type="html"><![CDATA[<p>1、git status 查看目前代码的修改状态</p><pre><code>a) 已暂存 (changes to be committed)    new file //表示新建文件    modified //表示修改文件    deleted //表示删除文件b) 已修改 (changed but not updated)    modified //表示修改文件    deleted //表示删除文件c) 未跟踪 (untracked files)另外，git 给出了可能需要的操作命令，git add/rm, gitcheckout –</code></pre><p>2、git diff 查看代码修改的内容(按q键退出)</p><pre><code>比较某文件与最近提交节点的差异。注意：如果该文件已暂存，那么应该使用git diff –cached技巧：如果省略后面一个hashcode，则默认表示与上一提交节点比较。(也可以利用^运算符)</code></pre><p>3、git add [filename] 暂存需要提交的文件</p><pre><code>如果是新建的文件则git add如果是修改的文件则git add如果是删除的文件则 git rm</code></pre><p>4、git commit -m “description informations” 提交已暂存的文件(注意注释填写规范)</p><pre><code>git commit –amend修改最近一次提交。有时候如果提交注释书写有误或者漏提文件，可以使用此命令。</code></pre><p>5、git pull origin master –allow-unrelated-histories</p><pre><code>如果执行失败，就按照提示还原有冲突的文件，然后再次尝试同步。命令：git checkout – &lt;有冲突的文件路径&gt;</code></pre><p>6、git push -u origin master&lt;本地分支名&gt; </p><pre><code>如果执行失败，一般是没有将服务器代码同步到本地导致的，先执行上面的git pull命令。</code></pre><p>7、如果过程中出现‘please enter a commit message…’(即进入了vim),首先esc然后输入:wq即可。</p><pre><code>git rm −r 我的文件夹/此处−r表示递归所有子目录，如果你要删除的，是空的文件夹，此处可以不用带上−r。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、git status 查看目前代码的修改状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a) 已暂存 (changes to be committed)
    new file //表示新建文件
    modified //表示修改文件
    deleted //表示删除文件
      
    
    </summary>
    
      <category term="技术" scheme="http://www.echodemo.cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="git" scheme="http://www.echodemo.cc/tags/git/"/>
    
      <category term="github" scheme="http://www.echodemo.cc/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>终于等到你</title>
    <link href="http://www.echodemo.cc/2018/03/08/2018-03-8-%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0/"/>
    <id>http://www.echodemo.cc/2018/03/08/2018-03-8-终于等到你/</id>
    <published>2018-03-08T03:46:44.000Z</published>
    <updated>2018-03-18T11:03:54.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不知道"><a href="#不知道" class="headerlink" title="不知道"></a>不知道</h1><p>不知道</p><p>头顶遥远的苍穹闪烁的星光</p><p>在无穷无尽里飞行了多少光年</p><p>终于赶来与我的目光相会</p><p><br><br>不知道</p><p>手中捧握的书卷古老的诗篇</p><p>在岁月长河中留存了多少记忆</p><p>此刻也将属于我的悉心珍藏</p><p><br><br>不知道</p><p>你与我不断发酵生酯的相逢</p><p>在冥冥注定中酝酿了多少韶华</p><p>但我仍然记得你发梢的芳香</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;不知道&quot;&gt;&lt;a href=&quot;#不知道&quot; class=&quot;headerlink&quot; title=&quot;不知道&quot;&gt;&lt;/a&gt;不知道&lt;/h1&gt;&lt;p&gt;不知道&lt;/p&gt;
&lt;p&gt;头顶遥远的苍穹闪烁的星光&lt;/p&gt;
&lt;p&gt;在无穷无尽里飞行了多少光年&lt;/p&gt;
&lt;p&gt;终于赶来与我的目光相会&lt;/p
      
    
    </summary>
    
      <category term="生活" scheme="http://www.echodemo.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="随笔" scheme="http://www.echodemo.cc/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="诗词" scheme="http://www.echodemo.cc/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
</feed>
